const order = require('./order');

/**
 * Stylelint конфигурация для React frontend
 *
 * @description Настраивает Stylelint для проверки CSS/SCSS кода
 * с поддержкой БЭМ методологии, SCSS и Prettier интеграции.
 *
 * Документация: https://stylelint.io/user-guide/configure
 */

/**
 * @function bemSelector Функция для проверки БЭМ селекторов
 *
 * @description Создает регулярное выражение для проверки
 * соответствия селекторов БЭМ методологии.
 *
 * Обоснование: БЭМ методология обеспечивает масштабируемую
 * и поддерживаемую архитектуру CSS.
 *
 * Документация: https://ru.bem.info/methodology/naming-convention/
 */
const bemSelector = (block, presetOptions) => {
  /**
   * @const ns - Namespace для селекторов
   *
   * @description Добавляет префикс к селекторам,
   * если указан namespace в настройках.
   *
   * Обоснование: Namespace помогает избежать конфликтов
   * имен в больших проектах.
   */
  const ns =
    presetOptions && presetOptions.namespace
      ? `${presetOptions.namespace}-`
      : '';

  /**
   * @const WORD - Паттерн для слов в селекторах
   *
   * @description Определяет допустимые символы в именах
   * блоков, элементов и модификаторов БЭМ.
   *
   * Обоснование: БЭМ использует kebab-case для именования,
   * поэтому поддерживаются буквы, цифры и дефисы.
   */
  const WORD = '[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*';

  /**
   * @const element - Паттерн для элементов БЭМ
   *
   * @description Определяет структуру элементов БЭМ
   * с префиксом __ (два подчеркивания).
   *
   * Обоснование: Элементы БЭМ обозначаются двойным подчеркиванием
   * для визуального разделения от блока.
   */
  const element = `(?:__${WORD})?`;

  /**
   * @const modifier - Паттерн для модификаторов БЭМ
   *
   * @description Определяет структуру модификаторов БЭМ
   * с префиксом _ (одно подчеркивание).
   *
   * Обоснование: Модификаторы БЭМ обозначаются одинарным подчеркиванием
   * и могут быть вложенными (до 2 уровней).
   */
  const modifier = `(?:_${WORD}){0,2}`;

  /**
   * @const attribute - Паттерн для атрибутов
   *
   * @description Определяет структуру атрибутов в селекторах
   * для поддержки селекторов по атрибутам.
   *
   * Обоснование: Атрибуты могут использоваться в селекторах
   * для дополнительной специфичности.
   */
  const attribute = '(?:\\[.+\\])?';

  /**
   * @return {RegExp} Возвращает регулярное выражение для БЭМ селекторов
   *
   * @description Создает полное регулярное выражение для проверки
   * соответствия селекторов БЭМ методологии.
   *
   * Обоснование: Регулярное выражение обеспечивает строгую проверку
   * соответствия БЭМ конвенциям именования.
   */
  return new RegExp(`^\\.${ns}${block}${element}${modifier}${attribute}$`);
};

module.exports = {
  /**
   * Расширения конфигурации
   *
   * @description Определяет базовые конфигурации, которые расширяются
   * текущей конфигурацией Stylelint.
   *
   * Обоснование: Использование готовых конфигураций обеспечивает
   * соответствие стандартам CSS и лучшим практикам.
   *
   * Документация: https://stylelint.io/user-guide/configure#extends
   */
  extends: [
    'stylelint-config-standard-scss', // Стандартные правила для SCSS.
    'stylelint-prettier/recommended', // Интеграция с Prettier для форматирования.
  ],

  /**
   * Плагины Stylelint
   *
   * @description Определяет плагины, которые расширяют
   * функциональность Stylelint.
   *
   * Обоснование: Плагины обеспечивают дополнительную функциональность
   * для работы с БЭМ, SCSS и порядком свойств.
   *
   * Документация: https://stylelint.io/user-guide/configure#plugins
   */
  plugins: [
    'stylelint-order', // Плагин для порядка CSS свойств.
    'stylelint-scss', // Плагин для SCSS.
    'stylelint-selector-bem-pattern', // Плагин для БЭМ методологии.
  ],

  /**
   * Правила Stylelint
   *
   * @description Определяет правила, которые Stylelint должен применять
   * при проверке CSS/SCSS кода.
   *
   * Обоснование: Правила обеспечивают качество кода и соответствие
   * стандартам проекта.
   *
   * Документация: https://stylelint.io/user-guide/configure#rules
   */
  rules: {
    /**
     * Регулярное выражение для проверки БЭМ классов
     *
     * @description Определяет регулярное выражение для проверки
     * соответствия классов БЭМ методологии:
     * - Блок [a-z]([-]?[a-z0-9]+)*
     * - Элемент: __[a-z0-9]([-]?[a-z0-9]+)*
     * - Модификатор _[a-z0-9]([-]?[a-z0-9]+)* (до 2 уровней)
     */
    'selector-class-pattern': [
      '^[a-z]([-]?[a-z0-9]+)*(__[a-z0-9]([-]?[a-z0-9]+)*)?(_[a-z0-9]([-]?[a-z0-9]+)*){0,2}$',
      {
        resolveNestedSelectors: true, // Разрешение вложенных селекторов с & интерполяцией
        message: function expected(selectorValue) {
          return `Cелектор класса: "${selectorValue}", должен соответствовать методологии БЭМ. Соглашение по именованию селекторов: https://ru.bem.info/methodology/naming-convention/`;
        },
      },
    ],

    /**
     * Отключение проверки неизвестных at-rules для SCSS
     *
     * @description Отключает проверку неизвестных at-rules для SCSS.
     */
    'at-rule-no-unknown': null,

    /**
     * Проверка SCSS at-rules для обеспечения совместимости
     *
     * @description Проверяет SCSS at-rules для обеспечения совместимости.
     */
    'scss/at-rule-no-unknown': true,

    /**
     * Проверка БЭМ селекторов с кастомной функцией
     *
     * @description Проверяет БЭМ селекторы с кастомной функцией.
     */
    'plugin/selector-bem-pattern': {
      preset: 'bem', // Предустановленная конфигурация для БЭМ
      componentSelectors: bemSelector, // Кастомная функция для проверки с поддержкой namespace
    },

    // Правила порядка CSS свойств для улучшения читаемости и поддерживаемости кода
    ...order.rules,
  },

  /**
   * Игнорируемые файлы
   *
   * @description Определяет файлы и директории, которые Stylelint
   * должен игнорировать при проверке кода.
   *
   * Обоснование: Игнорирование служебных файлов и директорий
   * ускоряет проверку и предотвращает ложные ошибки.
   *
   * Документация: https://stylelint.io/user-guide/configure#ignorefiles
   */
  ignoreFiles: [
    'src/app/styles/normalize.css', // Файл нормализации CSS со специфичным кодом
    'build/**/*', // Скомпилированные файлы сборки
    'docs/**/*', // Документация проекта
    'dist/**/*', // Выходные файлы сборки
  ],
};
