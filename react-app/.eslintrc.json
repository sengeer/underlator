{
  /**
   * ESLint конфигурация для React frontend
   *
   * Описание: Настраивает ESLint для проверки кода в React приложении
   * с поддержкой TypeScript, React, Feature-Sliced Design и интернационализации.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/
   */

  /**
   * Окружения для глобальных переменных
   *
   * Описание: Определяет глобальные переменные, доступные
   * в коде без явного объявления.
   *
   * Обоснование: React приложения работают в браузере и Node.js
   * окружении, поэтому необходимы соответствующие глобальные переменные.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/#specifying-environments
   */
  "env": {
    /**
     * Глобальные переменные браузера
     *
     * Описание: Включает глобальные переменные браузера
     * для работы с DOM и Web API.
     *
     * Обоснование: React приложения выполняются в браузере
     * и имеют доступ к Web API.
     */
    "browser": true,

    /**
     * Глобальные переменные Node.js
     *
     * Описание: Включает глобальные переменные Node.js
     * для работы с файловой системой и модулями.
     *
     * Обоснование: React приложения могут использовать Node.js
     * для сборки и разработки.
     */
    "node": true,

    /**
     * Глобальные переменные ES2021
     *
     * Описание: Включает глобальные переменные ES2021
     * для работы с современными JavaScript возможностями.
     *
     * Обоснование: Проект использует современные JavaScript
     * возможности, поэтому необходимы соответствующие глобальные переменные.
     */
    "es2021": true
  },

  /**
   * Расширения конфигурации
   *
   * Описание: Определяет базовые конфигурации, которые расширяются
   * текущей конфигурацией ESLint.
   *
   * Обоснование: Использование готовых конфигураций обеспечивает
   * соответствие стандартам и лучшим практикам.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/#extending-configuration-files
   */
  "extends": [
    /**
     * Рекомендуемые правила React
     *
     * Описание: Включает рекомендуемые правила для React приложений,
     * включая проверку JSX синтаксиса и React хуков.
     *
     * Обоснование: React приложения требуют специальных правил
     * для обеспечения качества и производительности.
     *
     * Документация: https://github.com/jsx-eslint/eslint-plugin-react
     */
    "plugin:react/recommended",

    /**
     * Правила для нового JSX runtime
     *
     * Описание: Включает правила для нового JSX runtime React 17+,
     * который не требует импорта React в каждом файле.
     *
     * Обоснование: Новый JSX runtime упрощает код и улучшает
     * производительность React приложений.
     *
     * Документация: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html
     */
    "plugin:react/jsx-runtime",

    /**
     * Правила импорта для TypeScript
     *
     * Описание: Включает правила для проверки импортов
     * в TypeScript проектах.
     *
     * Обоснование: TypeScript проекты требуют специальных правил
     * для проверки импортов и модулей.
     *
     * Документация: https://github.com/import-js/eslint-plugin-import
     */
    "plugin:import/typescript",

    /**
     * Интеграция с Prettier
     *
     * Описание: Интегрирует ESLint с Prettier для форматирования кода
     * и предотвращения конфликтов между линтером и форматтером.
     *
     * Обоснование: Prettier обеспечивает единообразное форматирование
     * кода в команде разработчиков.
     *
     * Документация: https://github.com/prettier/eslint-plugin-prettier
     */
    "plugin:prettier/recommended",

    /**
     * Правила Feature-Sliced Design
     *
     * Описание: Включает правила для соблюдения архитектуры
     * Feature-Sliced Design в проекте.
     *
     * Обоснование: Feature-Sliced Design обеспечивает масштабируемую
     * и поддерживаемую архитектуру React приложений.
     *
     * Документация: https://feature-sliced.design/
     */
    "@feature-sliced",

    /**
     * Правила интернационализации
     *
     * Описание: Включает правила для работы с интернационализацией
     * через библиотеку Lingui.
     *
     * Обоснование: Интернационализация требует специальных правил
     * для корректной работы с переводами.
     *
     * Документация: https://lingui.dev/
     */
    "plugin:lingui/recommended"
  ],

  /**
   * Парсер для TypeScript
   *
   * Описание: Указывает парсер для обработки TypeScript кода.
   * @typescript-eslint/parser поддерживает TypeScript синтаксис.
   *
   * Обоснование: TypeScript код требует специального парсера
   * для корректной обработки типов и синтаксиса.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/#specifying-parser
   */
  "parser": "@typescript-eslint/parser",

  /**
   * Переопределения конфигурации
   *
   * Описание: Определяет дополнительные конфигурации
   * для специфичных файлов или директорий.
   *
   * Обоснование: Разные типы файлов могут требовать
   * разных правил ESLint.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/#configuration-based-on-glob-patterns
   */
  "overrides": [],

  /**
   * Опции парсера
   *
   * Описание: Настраивает опции парсера для корректной
   * обработки TypeScript кода.
   *
   * Обоснование: Правильные опции парсера обеспечивают
   * корректную работу с современным TypeScript.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/#specifying-parser-options
   */
  "parserOptions": {
    /**
     * Версия ECMAScript
     *
     * Описание: Указывает версию ECMAScript для парсера.
     * 'latest' включает все современные возможности.
     *
     * Обоснование: Использование последней версии ECMAScript
     * обеспечивает поддержку всех современных возможностей.
     *
     * Документация: https://eslint.org/docs/latest/use/configure/#ecmaversion
     */
    "ecmaVersion": "latest",

    /**
     * Тип исходного кода
     *
     * Описание: Указывает тип исходного кода.
     * 'module' означает, что код использует ES модули.
     *
     * Обоснование: Современные проекты используют ES модули,
     * поэтому sourceType должен быть установлен в 'module'.
     *
     * Документация: https://eslint.org/docs/latest/use/configure/#sourcetype
     */
    "sourceType": "module",

    /**
     * Путь к tsconfig.json
     *
     * Описание: Указывает путь к файлу конфигурации TypeScript
     * для корректной работы с типами.
     *
     * Обоснование: Парсер TypeScript должен знать о настройках
     * проекта для корректной работы с типами.
     *
     * Документация: https://typescript-eslint.io/getting-started/typed-linting/
     */
    "project": "./tsconfig.json"
  },

  /**
   * Плагины ESLint
   *
   * Описание: Определяет плагины, которые расширяют
   * функциональность ESLint.
   *
   * Обоснование: Плагины обеспечивают дополнительную функциональность
   * для работы с React и форматированием кода.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/#configuring-plugins
   */
  "plugins": [
    /**
     * Плагин для React
     *
     * Описание: Плагин для проверки React кода.
     * Предоставляет правила для работы с JSX и React компонентами.
     *
     * Обоснование: React код требует специальных правил
     * для обеспечения качества и производительности.
     *
     * Документация: https://github.com/jsx-eslint/eslint-plugin-react
     */
    "react",

    /**
     * Плагин для Prettier
     *
     * Описание: Плагин для интеграции ESLint с Prettier.
     * Предотвращает конфликты между линтером и форматтером.
     *
     * Обоснование: Prettier обеспечивает единообразное форматирование
     * кода в команде разработчиков.
     *
     * Документация: https://github.com/prettier/eslint-plugin-prettier
     */
    "prettier"
  ],

  /**
   * Правила ESLint
   *
   * Описание: Определяет правила, которые ESLint должен применять
   * при проверке кода.
   *
   * Обоснование: Правила обеспечивают качество кода и соответствие
   * стандартам проекта.
   *
   * Документация: https://eslint.org/docs/latest/use/configure/#configuring-rules
   */
  "rules": {
    /**
     * Проверка типов пропсов
     *
     * Описание: Отключает проверку типов пропсов React,
     * так как проект использует TypeScript для типизации.
     *
     * Обоснование: TypeScript обеспечивает более строгую типизацию
     * чем PropTypes, поэтому PropTypes избыточны.
     *
     * Документация: https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md
     */
    "react/prop-types": "off",

    /**
     * Запрет импорта внутренних модулей
     *
     * Описание: Отключает запрет на импорт внутренних модулей,
     * так как Feature-Sliced Design может требовать такие импорты.
     *
     * Обоснование: Feature-Sliced Design архитектура может требовать
     * импорта внутренних модулей для обеспечения связности.
     *
     * Документация: https://github.com/import-js/eslint-plugin-import/blob/master/docs/rules/no-internal-modules.md
     */
    "import/no-internal-modules": "off"
  }
}
