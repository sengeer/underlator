import {
  OLLAMA_TEST_MODEL,
  OLLAMA_TEST_PROMPT,
} from '../../../shared/lib/constants';

/**
 * @module ManualIpcTesting
 * @description –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IPC API —Å Ollama
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Electron IPC –º–µ—Ç–æ–¥–æ–≤
 */

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint models:list
 */

export async function testListModels() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...');

    const response = await window.electron.models.list();

    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω:', response);

    if (response.success && response.data && response.data.models) {
      const models = response.data.models;
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π:`);
      models.forEach((model, index) => {
        console.log(
          `  ${index + 1}. ${model.name} (${formatSize(model.size)})`
        );
      });
    } else {
      console.log('üìã –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      if (response.error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', response.error);
      }
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
    throw error;
  }
}

/**
 * @description –°–∫–∞—á–∏–≤–∞–µ—Ç OLLAMA_TEST_MODEL —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint models:install —Å streaming –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
 */

export async function testDownloadModel() {
  try {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ${OLLAMA_TEST_MODEL}...`);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const unsubscribeProgress = window.electron.models.onInstallProgress(
      (progress) => {
        console.log('üì• –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏:', progress);

        if (progress.status === 'downloading' && progress.total) {
          const percent = Math.round(
            ((progress.size || 0) / progress.total) * 100
          );
          console.log(
            `üì• –ó–∞–≥—Ä—É–∑–∫–∞: ${percent}% (${progress.size}/${progress.total} –±–∞–π—Ç)`
          );
        } else if (progress.status === 'verifying') {
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...');
        } else if (progress.status === 'writing') {
          console.log('üíæ –ó–∞–ø–∏—Å—å –º–æ–¥–µ–ª–∏...');
        } else if (progress.status === 'complete') {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        }
      }
    );

    const response = await window.electron.models.install({
      name: OLLAMA_TEST_MODEL,
    });

    unsubscribeProgress();

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:', response);

    if (response.success) {
      console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${OLLAMA_TEST_MODEL} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏');
      if (response.error) {
        console.log('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.error);
      }
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    throw error;
  }
}

/**
 * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ OLLAMA_TEST_MODEL
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint ollama:generate —Å streaming –æ—Ç–≤–µ—Ç–æ–º
 */

export async function testGenerateText() {
  try {
    console.log(
      `üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –º–æ–¥–µ–ª—å—é ${OLLAMA_TEST_MODEL}...`
    );

    let fullResponse = '';
    let isFirstChunk = true;

    const unsubscribeProgress = window.electron.ollama.onGenerateProgress(
      (chunk) => {
        if (isFirstChunk) {
          console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
          isFirstChunk = false;
        }

        if (chunk.response) {
          fullResponse += chunk.response;
          console.log('ü§ñ Chunk:', chunk.response);
        }

        if (chunk.done) {
          console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          console.log(`üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: ${fullResponse}`);
        }
      }
    );

    // –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const response = await window.electron.ollama.generate({
      model: OLLAMA_TEST_MODEL,
      prompt: OLLAMA_TEST_PROMPT,
      temperature: 0.7,
      max_tokens: 200,
      num_predict: 1,
    });

    // –û—Ç–ø–∏—Å—ã–≤–∞–Ω–∏–µ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    unsubscribeProgress();

    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);

    if (response.success && response.data) {
      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:', response.data);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      if (response.error) {
        console.log('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.error);
      }
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
    throw error;
  }
}

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π Ollama
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:get
 */
export async function testGetCatalog() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π...');

    const response = await window.electron.catalog.get();

    console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω:', response);

    if (response && response.ollama) {
      const models = response.ollama;
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:`);
      models.slice(0, 10).forEach((model, index) => {
        console.log(
          `  ${index + 1}. ${model.name} (${formatSize(model.size)})`
        );
      });
      if (models.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${models.length - 10} –º–æ–¥–µ–ª–µ–π`);
      }
    } else {
      console.log('üìã –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
    throw error;
  }
}

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:get —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º forceRefresh
 */
export async function testGetCatalogForceRefresh() {
  try {
    console.log(
      'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...'
    );

    const response = await window.electron.catalog.get({ forceRefresh: true });

    console.log(
      '‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ):',
      response
    );

    if (response && response.ollama) {
      const models = response.ollama;
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ`);
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:', error);
    throw error;
  }
}

/**
 * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:search
 */
export async function testSearchModels() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...');

    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    console.log('üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Å "llama" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏...');
    const searchResponse1 = await window.electron.catalog.search({
      search: 'llama',
      type: 'ollama',
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ "llama":', searchResponse1);
    if (
      searchResponse1 &&
      searchResponse1.data &&
      searchResponse1.data.ollama
    ) {
      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${searchResponse1.data.ollama.length} –º–æ–¥–µ–ª–µ–π —Å "llama"`
      );
    }

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    console.log('üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Ä–∞–∑–º–µ—Ä–æ–º –º–µ–Ω–µ–µ 1GB...');
    const searchResponse2 = await window.electron.catalog.search({
      maxSize: 1024 * 1024 * 1024, // 1GB
      type: 'ollama',
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É:', searchResponse2);
    if (
      searchResponse2 &&
      searchResponse2.data &&
      searchResponse2.data.ollama
    ) {
      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${searchResponse2.data.ollama.length} –º–æ–¥–µ–ª–µ–π –º–µ–Ω–µ–µ 1GB`
      );
    }

    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
    console.log('üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º "chat"...');
    const searchResponse3 = await window.electron.catalog.search({
      tags: ['chat'],
      type: 'ollama',
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º:', searchResponse3);
    if (
      searchResponse3 &&
      searchResponse3.data &&
      searchResponse3.data.ollama
    ) {
      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${searchResponse3.data.ollama.length} –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º "chat"`
      );
    }

    return {
      searchByName: searchResponse1,
      searchBySize: searchResponse2,
      searchByTags: searchResponse3,
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
    throw error;
  }
}

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:get-model-info
 */
export async function testGetModelInfo() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
    const catalogResponse = await window.electron.catalog.get();

    if (
      !catalogResponse ||
      !catalogResponse.data ||
      !catalogResponse.data.ollama ||
      catalogResponse.data.ollama.length === 0
    ) {
      console.log(
        '‚ùå –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏'
      );
      return null;
    }

    const testModelName = catalogResponse.data.ollama[0].name;
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: ${testModelName}`);

    const response = await window.electron.catalog.getModelInfo({
      modelName: testModelName,
    });

    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞:', response);

    if (response && response.data) {
      console.log(`üìã –ú–æ–¥–µ–ª—å: ${response.data.name}`);
      console.log(`üìã –†–∞–∑–º–µ—Ä: ${formatSize(response.data.size)}`);
      console.log(
        `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${response.data.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`
      );
      console.log(
        `üìã –¢–µ–≥–∏: ${response.data.tags ? response.data.tags.join(', ') : '–ù–µ—Ç —Ç–µ–≥–æ–≤'}`
      );
    } else {
      console.log('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏:', error);
    throw error;
  }
}

/**
 * @description –£–¥–∞–ª—è–µ—Ç –º–æ–¥–µ–ª—å
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint models:remove
 */

export async function testRemoveModel() {
  try {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ ${OLLAMA_TEST_MODEL}...`);

    const response = await window.electron.models.remove({
      name: OLLAMA_TEST_MODEL,
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:', response);

    if (response.success) {
      console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${OLLAMA_TEST_MODEL} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏');
      if (response.error) {
        console.log('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.error);
      }
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    throw error;
  }
}

/**
 * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
 */

export async function runFullTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IPC API...\n');

  try {
    console.log('=== –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π ===');
    await testListModels();
    console.log('');

    console.log('=== –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π ===');
    await testGetCatalog();
    console.log('');

    console.log('=== –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π ===');
    await testSearchModels();
    console.log('');

    console.log('=== –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ ===');
    await testGetModelInfo();
    console.log('');

    console.log('=== –¢–ï–°–¢ 5: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===');
    await testDownloadModel();
    console.log('');

    console.log('=== –¢–ï–°–¢ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ===');
    await testGenerateText();
    console.log('');

    console.log('=== –¢–ï–°–¢ 7: –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===');
    await testRemoveModel();
    console.log('');

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    throw error;
  }
}

/**
 * @description –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */

function formatSize(bytes) {
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
  if (bytes === 0) return '0 B';

  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  testListModels,
  testDownloadModel,
  testGenerateText,
  testRemoveModel,
  testGetCatalog,
  testGetCatalogForceRefresh,
  testSearchModels,
  testGetModelInfo,
  runFullTest,
};
