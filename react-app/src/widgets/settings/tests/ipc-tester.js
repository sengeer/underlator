import { embeddedOllamaElectronApi } from '../apis/embedded-ollama-electron-api';
import { OLLAMA_TEST_MODEL, OLLAMA_TEST_PROMPT } from './constants';

/**
 * @module ManualIpcTesting
 * @description –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IPC API —Å Ollama
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Electron IPC –º–µ—Ç–æ–¥–æ–≤
 */

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint models:list
 */
export async function testListModels() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
  await embeddedOllamaElectronApi.listInstalledModels();
}

/**
 * @description –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç OLLAMA_TEST_MODEL —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint models:install —Å streaming –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
 */
export async function testInstallModel() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏...');
  await embeddedOllamaElectronApi.installModel({
    name: OLLAMA_TEST_MODEL,
  });
}

/**
 * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ OLLAMA_TEST_MODEL
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint ollama:generate —Å streaming –æ—Ç–≤–µ—Ç–æ–º
 */
export async function testGenerateText() {
  try {
    console.log(
      `üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –º–æ–¥–µ–ª—å—é ${OLLAMA_TEST_MODEL}...`
    );

    let fullResponse = '';
    let isFirstChunk = true;

    const unsubscribeProgress = window.electron.ollama.onGenerateProgress(
      (chunk) => {
        if (isFirstChunk) {
          console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
          isFirstChunk = false;
        }

        if (chunk.response) {
          fullResponse += chunk.response;
          console.log('ü§ñ Chunk:', chunk.response);
        }

        if (chunk.done) {
          console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          console.log(`üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: ${fullResponse}`);
        }
      }
    );

    // –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const response = await window.electron.ollama.generate({
      model: OLLAMA_TEST_MODEL,
      prompt: OLLAMA_TEST_PROMPT,
      temperature: 0.7,
      max_tokens: 200,
      num_predict: 1,
    });

    // –û—Ç–ø–∏—Å—ã–≤–∞–Ω–∏–µ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    unsubscribeProgress();

    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);

    if (response.success && response.data) {
      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:', response.data);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      if (response.error) {
        console.log('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.error);
      }
    }

    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
    throw error;
  }
}

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π Ollama
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:get
 */
export async function testGetCatalog() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π...');
  await embeddedOllamaElectronApi.getCatalog({ forceRefresh: false });
}

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:get —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º forceRefresh
 */
export async function testGetCatalogForceRefresh() {
  console.log(
    'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...'
  );
  await embeddedOllamaElectronApi.getCatalog({ forceRefresh: true });
}

/**
 * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:search
 */
export async function testSearchModels() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...');

    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    console.log('üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Å "llama" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏...');
    const nameSearchResponse = await embeddedOllamaElectronApi.searchModels({
      search: 'llama',
      type: 'ollama',
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ "llama":', nameSearchResponse);
    if (
      nameSearchResponse &&
      nameSearchResponse.data &&
      nameSearchResponse.data.ollama
    ) {
      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${nameSearchResponse.data.ollama.length} –º–æ–¥–µ–ª–µ–π —Å "llama"`
      );
    }

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    console.log('üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Ä–∞–∑–º–µ—Ä–æ–º –º–µ–Ω–µ–µ 1GB...');
    const sizeSearchResponse = await embeddedOllamaElectronApi.searchModels({
      maxSize: 1024 * 1024 * 1024, // 1GB
      type: 'ollama',
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É:', sizeSearchResponse);
    if (
      sizeSearchResponse &&
      sizeSearchResponse.data &&
      sizeSearchResponse.data.ollama
    ) {
      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${sizeSearchResponse.data.ollama.length} –º–æ–¥–µ–ª–µ–π –º–µ–Ω–µ–µ 1GB`
      );
    }

    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
    console.log('üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º "chat"...');
    const tagsSearchResponse = await embeddedOllamaElectronApi.searchModels({
      tags: ['chat'],
      type: 'ollama',
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º:', tagsSearchResponse);
    if (
      tagsSearchResponse &&
      tagsSearchResponse.data &&
      tagsSearchResponse.data.ollama
    ) {
      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${tagsSearchResponse.data.ollama.length} –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º "chat"`
      );
    }

    return {
      searchByName: nameSearchResponse,
      searchBySize: sizeSearchResponse,
      searchByTags: tagsSearchResponse,
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
    throw error;
  }
}

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint catalog:get-model-info
 */
export async function testGetModelInfo() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...');
  await embeddedOllamaElectronApi.getModelInfo({
    modelName: OLLAMA_TEST_MODEL,
  });
}

/**
 * @description –£–¥–∞–ª—è–µ—Ç –º–æ–¥–µ–ª—å
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPC endpoint models:remove
 */
export async function testRemoveModel() {
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ ${OLLAMA_TEST_MODEL}...`);
  await embeddedOllamaElectronApi.removeModel({
    name: OLLAMA_TEST_MODEL,
  });
}

/**
 * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
 */
export async function runFullTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IPC API...\n');

  try {
    console.log('=== –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π ===');
    await testListModels();
    console.log('');

    console.log('=== –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π ===');
    await testGetCatalog();
    console.log('');

    console.log('=== –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π ===');
    await testSearchModels();
    console.log('');

    console.log('=== –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ ===');
    await testGetModelInfo();
    console.log('');

    console.log('=== –¢–ï–°–¢ 5: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===');
    await testInstallModel();
    console.log('');

    console.log('=== –¢–ï–°–¢ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ===');
    await testGenerateText();
    console.log('');

    console.log('=== –¢–ï–°–¢ 7: –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===');
    await testRemoveModel();
    console.log('');

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  testListModels,
  testInstallModel,
  testGenerateText,
  testRemoveModel,
  testGetCatalog,
  testGetCatalogForceRefresh,
  testSearchModels,
  testGetModelInfo,
  runFullTest,
};
