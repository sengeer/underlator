import { ElectronOllama } from 'electron-ollama';
import { app } from 'electron';
import { mainWindow } from '../main';
import { translations } from '../main';

/**
 * @module OllamaManager
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Ollama —á–µ—Ä–µ–∑ electron-ollama –±–∏–±–ª–∏–æ—Ç–µ–∫—É
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É, –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É Ollama —Å–µ—Ä–≤–µ—Ä–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç fallback –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */

/**
 * @class OllamaManager
 * @description –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Ollama —Å–µ—Ä–≤–µ—Ä–æ–º –≤ Electron main process
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º Ollama
 */
class OllamaManager {
  private electronOllama: ElectronOllama | null = null;
  private isInitialized: boolean = false;
  private isStarting: boolean = false;
  private isStopping: boolean = false;

  /**
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OllamaManager –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Ollama
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   * @returns {Promise<void>} Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @throws {Error} –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama
   */
  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('‚úÖ OllamaManager has already been initialized');
      return;
    }

    try {
      console.log('üîÑ Initialization of the OllamaManager...');

      // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ElectronOllama —Å –±–∞–∑–æ–≤—ã–º –ø—É—Ç–µ–º
      this.electronOllama = new ElectronOllama({
        basePath: app.getPath('userData'),
        directory: 'ollama-binaries',
      });

      this.isInitialized = true;
      console.log('‚úÖ OllamaManager initialized successfully');
    } catch (error) {
      console.error('‚ùå Error initializing the OllamaManager:', error);
      this.isInitialized = false;
      throw new Error(
        `‚ùå Failed to initialize the OllamaManager: ${(error as Error).message}`
      );
    }
  }

  /**
   * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç Ollama —Å–µ—Ä–≤–µ—Ä
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   * @returns {Promise<boolean>} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—É—Å–∫–∞ (true - —É—Å–ø–µ—à–Ω–æ, false - —É–∂–µ –∑–∞–ø—É—â–µ–Ω)
   * @throws {Error} –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama —Å–µ—Ä–≤–µ—Ä–∞
   */
  async startOllama(): Promise<boolean> {
    if (!this.electronOllama) {
      throw new Error(
        '‚ùå OllamaManager is not initialized. Call initialize() first.'
      );
    }

    if (this.isStarting) {
      console.log('üîÑ Ollama is already starting...');
      return false;
    }

    try {
      this.isStarting = true;
      console.log('üîÑ Starting the Ollama server...');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const isRunning = await this.isOllamaRunning();
      if (isRunning) {
        console.log('‚úÖ Ollama server is already running');
        return false;
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Ollama
      const metadata = await this.electronOllama.getMetadata('latest');

      // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      await this.electronOllama.serve(metadata.version, {
        serverLog: message => console.log('üîå [Ollama Server]', message),
        downloadLog: percent =>
          mainWindow.webContents.send('splash:status-update', {
            status: 'downloading-ollama',
            message: translations.DOWNLOADING_OLLAMA || 'Downloading Ollama...',
            progress: percent,
          }),
        timeoutSec: 1,
      });

      console.log('‚úÖ Ollama server started successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Error starting the Ollama server:', error);
      throw new Error(
        `‚ùå Failed to start the Ollama server: ${(error as Error).message}`
      );
    } finally {
      this.isStarting = false;
    }
  }

  /**
   * @description –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama —Å–µ—Ä–≤–µ—Ä
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @returns {Promise<boolean>} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (true - —É—Å–ø–µ—à–Ω–æ, false - —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
   * @throws {Error} –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama —Å–µ—Ä–≤–µ—Ä–∞
   */
  async stopOllama(): Promise<boolean> {
    if (!this.electronOllama) {
      console.log('‚ùå OllamaManager is not initialized');
      return false;
    }

    if (this.isStopping) {
      console.log('üîÑ Ollama is already stopping...');
      return false;
    }

    try {
      this.isStopping = true;
      console.log('üîÑ Stopping the Ollama server...');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const isRunning = await this.isOllamaRunning();
      if (!isRunning) {
        console.log('‚úÖ Ollama server is already stopped');
        return false;
      }

      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ getServer()
      const server = this.electronOllama.getServer();
      if (server) {
        await server.stop();
      }

      console.log('‚úÖ Ollama server stopped successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Error stopping the Ollama server:', error);
      throw new Error(
        `‚ùå Failed to stop the Ollama server: ${(error as Error).message}`
      );
    } finally {
      this.isStopping = false;
    }
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã Ollama —Å–µ—Ä–≤–µ—Ä–∞
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç ping –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   * @returns {Promise<boolean>} Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (true - —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, false - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
   * @throws {Error} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async isOllamaRunning(): Promise<boolean> {
    if (!this.electronOllama) {
      return false;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ isRunning()
      const isRunning = await this.electronOllama.isRunning();
      return isRunning;
    } catch (error) {
      console.error('‚ùå Error checking the Ollama server status:', error);
      return false;
    }
  }

  /**
   * @description –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ElectronOllama –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   * @returns {ElectronOllama | null} –≠–∫–∑–µ–º–ø–ª—è—Ä ElectronOllama –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
   */
  getElectronOllamaInstance(): ElectronOllama | null {
    return this.electronOllama;
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OllamaManager
   * @returns {boolean} true –µ—Å–ª–∏ OllamaManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
   */
  getInitializationStatus(): boolean {
    return this.isInitialized;
  }

  /**
   * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ OllamaManager
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
   * @returns {Promise<void>} Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
   */
  async cleanup(): Promise<void> {
    try {
      if (this.electronOllama) {
        await this.stopOllama();
        this.electronOllama = null;
      }
      this.isInitialized = false;
      console.log('‚úÖ OllamaManager resources cleaned up');
    } catch (error) {
      console.error('‚ùå Error cleaning up the OllamaManager resources:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const ollamaManager = new OllamaManager();
export default ollamaManager;
