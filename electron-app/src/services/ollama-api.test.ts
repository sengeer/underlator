/**
 * @module OllamaApiTest
 * @description –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Ollama API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
 */

import { OllamaApi } from './ollama-api';
import { OllamaErrorHandler } from '../utils/error-handler';

/**
 * @description –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Ollama API
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞
 */
export class OllamaApiTest {
  private api: OllamaApi;

  constructor(baseUrl?: string) {
    this.api = new OllamaApi({
      baseUrl: baseUrl || 'http://127.0.0.1:11434',
      timeout: 30000,
      retryAttempts: 3,
      retryDelay: 1000,
    });
  }

  /**
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama —Å–µ—Ä–≤–µ—Ä—É
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama —Å–µ—Ä–≤–µ—Ä—É...');
      const isHealthy = await this.api.healthCheck();

      if (isHealthy) {
        console.log('‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      } else {
        console.log('‚ùå Ollama —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama:', error);
      return false;
    }
  }

  /**
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
   */
  async testListModels(): Promise<void> {
    try {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...');
      const models = await this.api.listModels();

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${models.models.length} –º–æ–¥–µ–ª–µ–π:`);
      models.models.forEach((model) => {
        console.log(`  - ${model.name} (${this.formatSize(model.size)})`);
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
      throw error;
    }
  }

  /**
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
   * @param modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @param prompt - –¢–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async testGeneration(modelName: string, prompt: string): Promise<string> {
    try {
      console.log(`ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –º–æ–¥–µ–ª—å—é ${modelName}...`);
      console.log(`üìù –ü—Ä–æ–º–ø—Ç: "${prompt}"`);

      let fullResponse = '';
      const response = await this.api.generate(
        {
          model: modelName,
          prompt: prompt,
          temperature: 0.7,
          max_tokens: 100,
        },
        (chunk) => {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º streaming –æ—Ç–≤–µ—Ç—ã
          if (chunk.response) {
            fullResponse += chunk.response;
            process.stdout.write(chunk.response);
          }

          if (chunk.done) {
            console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          }
        }
      );

      return fullResponse;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–¥–µ–ª–∏
   * @param modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  async testInstallModel(modelName: string): Promise<void> {
    try {
      console.log(`üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ ${modelName}...`);

      const result = await this.api.installModel(
        { name: modelName },
        (progress) => {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
          if (progress.status === 'downloading') {
            const percent = progress.total
              ? Math.round(((progress.size || 0) / progress.total) * 100)
              : 0;
            console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞: ${percent}%`);
          } else if (progress.status === 'verifying') {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...');
          } else if (progress.status === 'writing') {
            console.log('üíæ –ó–∞–ø–∏—Å—å –º–æ–¥–µ–ª–∏...');
          } else if (progress.status === 'complete') {
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          }
        }
      );

      if (result.success) {
        console.log('‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏:', error);
      throw error;
    }
  }

  /**
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @param modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è
   */
  async testRemoveModel(modelName: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ${modelName}...`);

      const result = await this.api.removeModel({ name: modelName });

      if (result.success) {
        console.log('‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
      throw error;
    }
  }

  /**
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
   * @param modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @returns Promise —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
   */
  async testGetModelInfo(modelName: string): Promise<void> {
    try {
      console.log(`‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ ${modelName}...`);

      const info = await this.api.getModelInfo(modelName);

      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:');
      console.log(JSON.stringify(info, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏:', error);
      throw error;
    }
  }

  /**
   * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
   * @param modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
   */
  async runFullTest(modelName: string = 'llama2'): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ollama API...\n');

    try {
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const isConnected = await this.testConnection();
      if (!isConnected) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama —Å–µ—Ä–≤–µ—Ä—É');
        return;
      }

      console.log('');

      // –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
      await this.testListModels();
      console.log('');

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
      await this.testGetModelInfo(modelName);
      console.log('');

      // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞)
      try {
        await this.testGeneration(modelName, '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?');
        console.log('');
      } catch (error) {
        console.log(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${modelName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
      }

      console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
      throw error;
    }
  }

  /**
   * @description –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   * @param bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
   * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
   */
  private formatSize(bytes: number): string {
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 B';

    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
  }
}

/**
 * @description –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * @param baseUrl - –ë–∞–∑–æ–≤—ã–π URL Ollama —Å–µ—Ä–≤–µ—Ä–∞
 * @param modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function runOllamaApiTests(
  baseUrl: string = 'http://127.0.0.1:11434',
  modelName: string = 'llama2'
): Promise<void> {
  const tester = new OllamaApiTest(baseUrl);
  await tester.runFullTest(modelName);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default OllamaApiTest;
