import { BrowserWindow } from 'electron';
import {
  DEFAULT_SPLASH_CONFIG,
  SPLASH_MESSAGES,
  SPLASH_TIMING,
  SPLASH_IPC_EVENTS,
} from '../constants/splash.constants';
import type {
  SplashConfig,
  SplashMessages,
  SplashStatusCallback,
  SplashProgressCallback,
  SplashCompleteCallback,
  SplashErrorCallback,
  SplashOperationResult,
} from '../types/splash.types';

/**
 * @class SplashManager
 * @description –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è splash screen –≤ Electron main process
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–¥–∞—á—É —Å–æ–±—ã—Ç–∏–π –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
 */
export class SplashManager {
  private config: SplashConfig;
  private mainWindow: BrowserWindow | null = null;
  private currentStatus: SplashMessages;
  private startTime: number = 0;
  private isInitialized: boolean = false;
  private isVisible: boolean = false;
  private hideTimeout: NodeJS.Timeout | null = null;
  private statusCallbacks: SplashStatusCallback[] = [];
  private progressCallbacks: SplashProgressCallback[] = [];
  private completeCallbacks: SplashCompleteCallback[] = [];
  private errorCallbacks: SplashErrorCallback[] = [];

  /**
   * @description –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä SplashManager
   * @param config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è splash screen
   */
  constructor(config?: Partial<SplashConfig>) {
    this.config = {
      ...DEFAULT_SPLASH_CONFIG,
      ...config,
    };
    this.currentStatus = SPLASH_MESSAGES['INITIALIZING'] || {
      status: 'initializing',
      message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...',
      progress: 0,
    };
  }

  /**
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SplashManager —Å –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º
   * @param mainWindow - –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async initialize(
    mainWindow: BrowserWindow
  ): Promise<SplashOperationResult<void>> {
    try {
      this.mainWindow = mainWindow;
      this.startTime = Date.now();
      this.isInitialized = true;

      await this.show();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      await this.updateStatus(
        SPLASH_MESSAGES['INITIALIZING'] || {
          status: 'initializing',
          message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...',
          progress: 0,
        }
      );

      console.log('SplashManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      return {
        success: true,
        status: 'ready',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SplashManager:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        status: 'error',
      };
    }
  }

  /**
   * @description –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç splash screen
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç splash screen HTML –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async show(): Promise<SplashOperationResult<void>> {
    if (!this.mainWindow) {
      return {
        success: false,
        error: 'Main window not available',
        status: 'error',
      };
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è Webpack –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ splash screen
      const splashUrl = process.env['MAIN_WINDOW_WEBPACK_ENTRY'];

      if (splashUrl) {
        console.log(
          'üîß –ó–∞–≥—Ä—É–∂–∞–µ–º splash screen —á–µ—Ä–µ–∑ Webpack entry:',
          splashUrl
        );
        await this.mainWindow.loadURL(splashUrl);
      } else {
        // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        const splashPath = `file://${require('path').join(__dirname, '/presentation/splash/index.html')}`;
        console.log(
          'üîß Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º splash screen –∏–∑ —Ñ–∞–π–ª–∞:',
          splashPath
        );
        await this.mainWindow.loadURL(splashPath);
      }

      this.isVisible = true;
      console.log('Splash screen –ø–æ–∫–∞–∑–∞–Ω');

      return {
        success: true,
        status: 'ready',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ splash screen:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        status: 'error',
      };
    }
  }

  /**
   * @description –°–∫—Ä—ã–≤–∞–µ—Ç splash screen –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async hide(): Promise<SplashOperationResult<void>> {
    if (!this.mainWindow || !this.isVisible) {
      return {
        success: false,
        error: 'Splash screen not visible',
        status: 'error',
      };
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const elapsedTime = Date.now() - this.startTime;
      const remainingTime = Math.max(
        0,
        this.config.minDisplayTime - elapsedTime
      );

      if (remainingTime > 0) {
        // –ñ–¥–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        await new Promise(resolve => setTimeout(resolve, remainingTime));
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–∫—Ä—ã—Ç–∏—è –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
      this.mainWindow.webContents.send(SPLASH_IPC_EVENTS.HIDE);

      // –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
      await new Promise(resolve =>
        setTimeout(resolve, SPLASH_TIMING.TRANSITION_DURATION)
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      await this.loadMainApp();

      this.isVisible = false;
      console.log('Splash screen —Å–∫—Ä—ã—Ç, –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');

      return {
        success: true,
        status: 'ready',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è splash screen:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        status: 'error',
      };
    }
  }

  /**
   * @description –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å splash screen
   * @param status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async updateStatus(
    status: SplashMessages
  ): Promise<SplashOperationResult<void>> {
    try {
      this.currentStatus = status;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å
      if (this.mainWindow && this.isVisible) {
        this.mainWindow.webContents.send(SPLASH_IPC_EVENTS.UPDATE_STATUS, {
          type: SPLASH_IPC_EVENTS.UPDATE_STATUS,
          data: status,
          timestamp: Date.now(),
        });
      }

      // –í—ã–∑—ã–≤–∞–µ—Ç callbacks
      this.statusCallbacks.forEach(callback => callback(status));

      console.log(`Splash status –æ–±–Ω–æ–≤–ª–µ–Ω: ${status.message}`);

      return {
        success: true,
        status: status.status,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ splash screen:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        status: 'error',
      };
    }
  }

  /**
   * @description –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async setProgress(progress: number): Promise<SplashOperationResult<void>> {
    try {
      const clampedProgress = Math.max(0, Math.min(100, progress));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
      if (this.mainWindow && this.isVisible) {
        this.mainWindow.webContents.send(SPLASH_IPC_EVENTS.SET_PROGRESS, {
          type: SPLASH_IPC_EVENTS.SET_PROGRESS,
          data: clampedProgress,
          timestamp: Date.now(),
        });
      }

      // –í—ã–∑—ã–≤–∞–µ—Ç callbacks
      this.progressCallbacks.forEach(callback => callback(clampedProgress));

      return {
        success: true,
        status: this.currentStatus.status,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ splash screen:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        status: 'error',
      };
    }
  }

  /**
   * @description –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç splash screen
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async complete(): Promise<SplashOperationResult<void>> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≥–æ—Ç–æ–≤–æ"
      await this.updateStatus(
        SPLASH_MESSAGES['READY'] || {
          status: 'ready',
          message: '–ì–æ—Ç–æ–≤–æ!',
          details: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ',
          progress: 100,
        }
      );

      // –í—ã–∑—ã–≤–∞–µ—Ç callbacks –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this.completeCallbacks.forEach(callback => callback());

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
      if (this.mainWindow && this.isVisible) {
        this.mainWindow.webContents.send(SPLASH_IPC_EVENTS.COMPLETE, {
          type: SPLASH_IPC_EVENTS.COMPLETE,
          timestamp: Date.now(),
        });
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç splash screen –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
      if (this.config.autoHide) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç setTimeout –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è
        setTimeout(async () => {
          await this.hide();
        }, SPLASH_TIMING.HIDE_DELAY);
      }

      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      return {
        success: true,
        status: 'ready',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        status: 'error',
      };
    }
  }

  /**
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async handleError(error: string): Promise<SplashOperationResult<void>> {
    try {
      const errorStatus: SplashMessages = {
        ...(SPLASH_MESSAGES['ERROR'] || {
          status: 'error',
          message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏',
          details: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
          progress: 0,
        }),
        details: error,
      };

      await this.updateStatus(errorStatus);

      // –í—ã–∑—ã–≤–∞–µ—Ç callbacks –æ—à–∏–±–æ–∫
      this.errorCallbacks.forEach(callback => callback(error));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
      if (this.mainWindow && this.isVisible) {
        this.mainWindow.webContents.send(SPLASH_IPC_EVENTS.ERROR, {
          type: SPLASH_IPC_EVENTS.ERROR,
          data: error,
          timestamp: Date.now(),
        });
      }

      console.error(`Splash error: ${error}`);

      return {
        success: true,
        status: 'error',
      };
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ splash screen:', err);
      return {
        success: false,
        error: err instanceof Error ? err.message : 'Unknown error',
        status: 'error',
      };
    }
  }

  /**
   * @description –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è —Å splash screen –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  private async loadMainApp(): Promise<void> {
    if (!this.mainWindow) {
      throw new Error('Main window not available');
    }

    const isDev = process.env['NODE_ENV'] === 'development';
    const path = require('path');

    if (isDev) {
      console.log(
        'üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ dev —Ä–µ–∂–∏–º–µ: http://localhost:8000'
      );
      await this.mainWindow.loadURL('http://localhost:8000');
    } else {
      console.log(
        'üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ production —Ä–µ–∂–∏–º–µ:',
        path.join(__dirname, '../react/index.html')
      );
      await this.mainWindow.loadFile(
        path.join(__dirname, '../react/index.html')
      );
    }
  }

  /**
   * @description –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å splash screen
   * @returns –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
   */
  getCurrentStatus(): SplashMessages {
    return { ...this.currentStatus };
  }

  /**
   * @description –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã SplashManager
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ callbacks –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  cleanup(): void {
    this.statusCallbacks = [];
    this.progressCallbacks = [];
    this.completeCallbacks = [];
    this.errorCallbacks = [];

    if (this.hideTimeout) {
      clearTimeout(this.hideTimeout);
      this.hideTimeout = null;
    }

    this.isInitialized = false;
    this.isVisible = false;
    this.mainWindow = null;

    console.log('SplashManager —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
  }
}
