const { app, BrowserWindow, ipcMain, Menu } = require('electron');
const path = require('path');
import { OllamaManager, OllamaApi, ModelCatalogService } from './services';
import { IpcHandler } from './presentation/ipc/ipc-handlers';
import type {
  MenuTranslations,
  OllamaGenerateRequest,
  OllamaPullRequest,
  OllamaDeleteRequest,
  ModelCatalog,
  OllamaModelInfo,
  CatalogFilters,
  SplashMessages,
} from './types';

if (require('electron-squirrel-startup')) {
  app.quit();
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç development —Ä–µ–∂–∏–º
 * –í Electron Forge —Å webpack NODE_ENV –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cross-env
 */
const isDev: boolean = process.env['NODE_ENV'] === 'development';
console.log('üîß NODE_ENV:', process.env['NODE_ENV']);

export let mainWindow: typeof BrowserWindow | null = null;
let ollamaApi: OllamaApi | null = null;
let modelCatalogService: ModelCatalogService | null = null;
let currentAbortController: AbortController | null = null;
const isMac: boolean = process.platform === 'darwin';
const isWindows: boolean = process.platform === 'win32';

export let translations: MenuTranslations = {};
let isQuitting: boolean = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

/**
 * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç worker –ø—Ä–æ—Ü–µ—Å—Å—ã
 */
function cleanupResources(): void {
  console.log('üßπ Cleaning up application resources...');

  // –£–¥–∞–ª—è–µ—Ç Ollama –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  ipcMain.removeHandler('ollama:generate');
  ipcMain.removeHandler('models:install');
  ipcMain.removeHandler('models:remove');
  ipcMain.removeHandler('models:list');

  // –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
  ipcMain.removeHandler('catalog:get');
  ipcMain.removeHandler('catalog:search');
  ipcMain.removeHandler('catalog:get-model-info');

  // –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ splash screen
  ipcMain.removeHandler('splash:get-status');

  mainWindow = null;
  console.log('‚úÖ Resources have been cleared');
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å splash screen –≤ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param status - –°—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ React splash screen
 */
function sendSplashStatus(status: SplashMessages): void {
  console.log('üì§ Sending the splash screen status:', status);
  if (mainWindow) {
    mainWindow.webContents.send('splash:status-update', status);
    console.log('‚úÖ The status has been sent to the React app');
  } else {
    console.error('‚ùå The main window is not available for sending the status');
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function sendSplashComplete(): void {
  if (mainWindow) {
    mainWindow.webContents.send('splash:complete');
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ splash screen
 * @param error - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 */
function sendSplashError(error: string): void {
  if (mainWindow) {
    mainWindow.webContents.send('splash:error', error);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Ollama –∏ —Å–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Ollama –∫ —Ä–∞–±–æ—Ç–µ
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ React splash screen —á–µ—Ä–µ–∑ IPC —Å–æ–±—ã—Ç–∏—è
 */
async function initializeOllama(): Promise<void> {
  try {
    console.log('üöÄ Starting initialization of Ollama...');

    const downloadMessage =
      translations.DOWNLOADING_APP || 'Downloading App...';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama –≤ React splash screen
    sendSplashStatus({
      status: 'checking-ollama',
      message: downloadMessage,
      progress: 10,
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OllamaManager
    await OllamaManager.initialize();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ Ollama –≤ React splash screen
    sendSplashStatus({
      status: 'starting-ollama',
      message: downloadMessage,
      progress: 25,
    });

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç Ollama —Å–µ—Ä–≤–µ—Ä
    const isStarted = await OllamaManager.startOllama();

    if (isStarted) {
      console.log('‚úÖ Ollama server is running successfully');
    } else {
      console.log('üîÑ The Ollama server has already been started');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ React splash screen
    sendSplashStatus({
      status: 'waiting-for-server',
      message: downloadMessage,
      progress: 40,
    });

    // –°–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Ollama
    ollamaApi = new OllamaApi();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤ React splash screen
    sendSplashStatus({
      status: 'health-check',
      message: downloadMessage,
      progress: 60,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const isHealthy = await ollamaApi.healthCheck();
    if (isHealthy) {
      console.log('‚úÖ The Ollama API is available');
    } else {
      console.warn(
        '‚ö†Ô∏è The Ollama API is unavailable, but the server is running'
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è API –≤ React splash screen
    sendSplashStatus({
      status: 'creating-api',
      message: downloadMessage,
      progress: 75,
    });

    // –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
    modelCatalogService = new ModelCatalogService();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ React splash screen
    sendSplashStatus({
      status: 'creating-catalog',
      message: downloadMessage,
      progress: 90,
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç IPC handlers –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    console.log('üîß IPC handlers registration...');
    setupOllamaIpcHandlers();
    setupCatalogIpcHandlers();
    console.log('‚úÖ IPC handlers are registered');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ React splash screen
    sendSplashStatus({
      status: 'ready',
      message: downloadMessage,
      progress: 100,
    });

    console.log('‚úÖ Ollama initialized successfully');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ React splash screen
    sendSplashComplete();
  } catch (error) {
    console.error('‚ùå Ollama initialization error:', error);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ React splash screen
    sendSplashError(
      `‚ùå Failed to initialize Ollama: ${(error as Error).message}`
    );

    throw new Error(
      `‚ùå Failed to initialize Ollama: ${(error as Error).message}`
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–Ω—é
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç renderer –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—é
 */
ipcMain.on(
  'update-translations',
  (_event: any, newTranslations: MenuTranslations) => {
    translations = newTranslations;
    buildMenu();
  }
);

/**
 * –°—Ç—Ä–æ–∏—Ç –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ macOS –∏ Windows –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function buildMenu(): void {
  // –®–∞–±–ª–æ–Ω –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
  const template: any[] = [
    {
      label: translations.MENU || 'Menu',
      submenu: [
        {
          role: 'about',
          label: translations.ABOUT || 'About',
        },
        { role: 'undo', label: translations.UNDO || 'Undo' },
        { role: 'redo', label: translations.REDO || 'Redo' },
        { role: 'cut', label: translations.CUT || 'Cut' },
        { role: 'copy', label: translations.COPY || 'Copy' },
        { role: 'paste', label: translations.PASTE || 'Paste' },
        { role: 'selectall', label: translations.SELECT_ALL || 'Select All' },
        {
          role: 'quit',
          label: translations.QUIT || 'Quit',
          click: () => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            isQuitting = true;
            cleanupResources();
            app.quit();
          },
        },
        { role: 'toggleDevTools', visible: isDev },
      ],
    },
  ];

  const menu = Menu.buildFromTemplate(template);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  if (isMac) {
    // –î–ª—è macOS
    Menu.setApplicationMenu(menu);
  } else {
    // –î–ª—è Windows –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if (mainWindow) {
      mainWindow.setMenu(menu);
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã, –∏–∫–æ–Ω–∫–∏ –∏ webPreferences
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
 */
function createWindow(): void {
  console.log('üèóÔ∏è Creating the main window...');
  buildMenu();

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ preload —Å–∫—Ä–∏–ø—Ç—É
   */
  const preloadPath = path.join(__dirname, 'preload.js');

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –æ–∫–Ω–∞
  mainWindow = new BrowserWindow({
    width: 480,
    height: 350,
    minWidth: 480,
    minHeight: 350,
    icon: path.join(__dirname, '../icons', isWindows ? 'icon.ico' : ''),
    webPreferences: {
      preload: preloadPath,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
  console.log('üåê Uploading the React app...');
  loadReactApp();

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
   * –ù–∞ macOS —Å–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–º –≤—ã—Ö–æ–¥–µ
   * –ù–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
   */
  mainWindow.on('close', (event: Electron.Event) => {
    if (isMac && !isQuitting) {
      // –ù–∞ macOS –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–º–µ—Ä–µ–≤–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ dock, –Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã—Ö–æ–¥–µ
      event.preventDefault();
      mainWindow?.hide();
    } else {
      // –ù–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏–ª–∏ –ø—Ä–∏ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
      cleanupResources();
    }
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
   */
  mainWindow.on('closed', () => {
    cleanupResources();
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç splash screen handlers
  setupSplashIpcHandlers();

  // IPC handlers –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  // –≤ —Ñ—É–Ω–∫—Ü–∏–∏ initializeOllama()
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
 */
function loadReactApp(): void {
  if (!mainWindow) {
    console.error('‚ùå Main window not available');
    return;
  }

  if (isDev) {
    console.log('üîß Uploading the URL in dev mode: http://localhost:8000');
    mainWindow.loadURL('http://localhost:8000');
  } else {
    console.log(
      'üîß Uploading the file in production mode:',
      path.join(__dirname, '../react/index.html')
    );
    mainWindow.loadFile(path.join(__dirname, '../react/index.html'));
  }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama API
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–æ–≤–∫–∏, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function setupOllamaIpcHandlers(): void {
  console.log('üîß Setting up Ollama IPC handlers...');
  if (!ollamaApi) {
    console.error('‚ùå OllamaApi is not initialized');
    return;
  }
  console.log('‚úÖ OllamaApi is available, register handlers...');

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Ollama
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç streaming –æ—Ç–≤–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'ollama:generate',
    IpcHandler.createHandlerWrapper(
      async (request: OllamaGenerateRequest): Promise<string> => {
        // –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π AbortController –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        currentAbortController = new AbortController();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(request, [
          'model',
          'prompt',
        ]);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        let fullResponse = '';

        try {
          await ollamaApi!.generate(
            request,
            chunk => {
              // –û—Ç–ø—Ä–∞–≤–∫–∞ streaming –æ—Ç–≤–µ—Ç–æ–≤ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
              mainWindow?.webContents.send('ollama:generate-progress', chunk);

              if (chunk.response) {
                fullResponse += chunk.response;
              }
            },
            currentAbortController.signal
          );

          return fullResponse;
        } finally {
          // –û—á–∏—â–∞–µ—Ç AbortController –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          currentAbortController = null;
        }
      },
      'ollama:generate'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç streaming wrapper –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  ipcMain.handle(
    'models:install',
    IpcHandler.createStreamingHandlerWrapper(
      async (
        request: OllamaPullRequest,
        onProgress: (progress: any) => void
      ): Promise<{ success: boolean }> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(request, ['name']);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await ollamaApi!.installModel(request, progress => {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
          mainWindow?.webContents.send('models:install-progress', progress);
          // –í—ã–∑—ã–≤–∞–µ—Ç callback –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          onProgress(progress);
        });

        return { success: result.success };
      },
      'models:install'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'models:remove',
    IpcHandler.createHandlerWrapper(
      async (request: OllamaDeleteRequest): Promise<{ success: boolean }> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(request, ['name']);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await ollamaApi!.removeModel(request);
        return { success: result.success };
      },
      'models:remove'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Ollama
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'models:list',
    IpcHandler.createHandlerWrapper(async (): Promise<any> => {
      const models = await ollamaApi!.listModels();
      return models;
    }, 'models:list')
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ollama
   * –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  ipcMain.handle(
    'ollama:stop',
    IpcHandler.createHandlerWrapper(async (): Promise<void> => {
      if (currentAbortController) {
        currentAbortController.abort();
        currentAbortController = null;
        console.log('‚úÖ Generation stopped');
      } else {
        console.log('‚ö†Ô∏è There is no active generation to stop');
      }
    }, 'ollama:stop')
  );
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –º–æ–¥–µ–ª–µ–π
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞, –ø–æ–∏—Å–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function setupCatalogIpcHandlers(): void {
  console.log('üîß Setting up Catalog IPC handlers...');
  if (!modelCatalogService) {
    console.error('‚ùå ModelCatalogService is not initialized');
    return;
  }
  console.log('‚úÖ ModelCatalogService is available, register handlers...');

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'catalog:get',
    IpcHandler.createHandlerWrapper(
      async (
        params: { forceRefresh?: boolean } = {}
      ): Promise<ModelCatalog> => {
        const result = await modelCatalogService!.getAvailableModels(
          params.forceRefresh || false
        );

        if (!result.success || !result.data) {
          throw new Error(result.error || 'Failed to get catalog');
        }

        return result.data;
      },
      'catalog:get'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'catalog:search',
    IpcHandler.createHandlerWrapper(
      async (filters: CatalogFilters): Promise<ModelCatalog> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const validation = IpcHandler.validateRequest(filters, []);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await modelCatalogService!.searchModels(filters);

        if (!result.success || !result.data) {
          throw new Error(result.error || '‚ùå Failed to search models');
        }

        return result.data;
      },
      'catalog:search'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'catalog:get-model-info',
    IpcHandler.createHandlerWrapper(
      async (params: {
        modelName: string;
      }): Promise<OllamaModelInfo | null> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(params, ['modelName']);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await modelCatalogService!.getModelInfo(
          params.modelName
        );

        if (!result.success) {
          throw new Error(result.error || '‚ùå Failed to get model info');
        }

        return result.data || null;
      },
      'catalog:get-model-info'
    )
  );
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è splash screen
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
 */
function setupSplashIpcHandlers(): void {
  console.log('üîß Configuring Splash IPC handlers...');

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ splash screen
   * React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  ipcMain.handle('splash:get-status', async () => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    return {
      status: 'initializing',
      progress: 0,
    };
  });

  console.log('‚úÖ Splash IPC handlers are configured');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Electron
 * –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Ollama
 */
app.on('ready', async () => {
  try {
    console.log('üöÄ Electron app ready - starting initialization');

    // –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    console.log('üì± Creating the main window...');
    createWindow();

    console.log('‚è≥ Starting asynchronous initialization of Ollama...');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Ollama –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
    // –≠—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(() => {
      initializeOllama().catch(error => {
        console.error('‚ùå Ollama initialization error:', error);
        sendSplashError(`‚ùå Ollama initialization error: ${error.message}`);
      });
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

    console.log('‚úÖ The application has been successfully initialized');
  } catch (error) {
    console.error('‚ùå Application initialization error:', error);

    // –°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    createWindow();
  }
});

// –í—ã—Ö–æ–¥ –∫–æ–≥–¥–∞ –≤—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã, –∫—Ä–æ–º–µ macOS. –¢–∞–º –æ–±—ã—á–Ω–æ
// –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏—Ö –ø–∞–Ω–µ–ª—å –º–µ–Ω—é –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
// —è–≤–Ω–æ –Ω–µ –≤—ã–π–¥–µ—Ç —Å –ø–æ–º–æ—â—å—é Cmd + Q
app.on('window-all-closed', async () => {
  if (!isMac) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try {
      await OllamaManager.stopOllama();
      console.log('‚úÖ Ollama server is stopped');
    } catch (error) {
      console.error('‚ùå Error stopping Ollama:', error);
    }

    app.quit();
  }
  // –ù–∞ macOS –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —è–≤–Ω–æ –≤—ã–π—Ç–∏ —á–µ—Ä–µ–∑ Cmd + Q –∏–ª–∏ –º–µ–Ω—é
});

app.on('activate', () => {
  // –ù–∞ macOS –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤ dock
  if (isMac) {
    if (mainWindow) {
      // –ï—Å–ª–∏ –æ–∫–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–∫—Ä—ã—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
      if (mainWindow.isMinimized()) {
        mainWindow.restore();
      }
      mainWindow.show();
      mainWindow.focus();
    } else {
      // –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
      createWindow();
    }
  } else {
    // –ù–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.on('before-quit', async () => {
  console.log('üö™ The application is shutting down...');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
  isQuitting = true;

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
  try {
    await OllamaManager.stopOllama();
    console.log('‚úÖÔ∏è Ollama server is stopped when the application is closed');
  } catch (error) {
    console.error('‚ùå Error stopping Ollama when closing:', error);
  }

  // –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  cleanupResources();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –ü–ö–ú –Ω–∞ –∏–∫–æ–Ω–∫–µ –≤ dock)
app.on('will-quit', () => {
  console.log('üö™ The system command to terminate the application...');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
  isQuitting = true;
});

// –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –∫–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
// –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–¥–∞
