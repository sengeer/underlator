const { app, BrowserWindow, ipcMain, Menu } = require('electron');
const path = require('path');
const { Worker } = require('worker_threads');
const ModelDownloader = require('./services/model-downloader');
import { ollamaManager } from './services/ollama-manager';
import { OllamaApi } from './services/ollama-api';
import type {
  MenuTranslations,
  TransformersArgs,
  WorkerStatus,
  ModelAvailability,
  ModelOperationResult,
  AvailableModels,
  OllamaGenerateRequest,
  OllamaPullRequest,
  OllamaDeleteRequest,
} from './types';

if (require('electron-squirrel-startup')) {
  app.quit();
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç development —Ä–µ–∂–∏–º
 * –í Electron Forge —Å webpack NODE_ENV –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cross-env
 */
const isDev: boolean = process.env['NODE_ENV'] === 'development';
console.log('üîß NODE_ENV:', process.env['NODE_ENV']);

let worker: typeof Worker | null = null;
let mainWindow: typeof BrowserWindow | null = null;
let isHandlerRegistered: boolean = false;
let ollamaApi: OllamaApi | null = null;
const isMac: boolean = process.platform === 'darwin';
const isWindows: boolean = process.platform === 'win32';

let translations: MenuTranslations = {};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Ollama –∏ —Å–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Ollama –∫ —Ä–∞–±–æ—Ç–µ
 */
async function initializeOllama(): Promise<void> {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OllamaManager
    await ollamaManager.initialize();

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç Ollama —Å–µ—Ä–≤–µ—Ä
    const isStarted = await ollamaManager.startOllama();

    if (isStarted) {
      console.log('Ollama —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    } else {
      console.log('Ollama —Å–µ—Ä–≤–µ—Ä —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Ollama
    ollamaApi = new OllamaApi();

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const isHealthy = await ollamaApi.healthCheck();
    if (isHealthy) {
      console.log('Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.warn('Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Ollama:', error);
    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Ollama: ${(error as Error).message}`
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–Ω—é
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç renderer –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—é
 */
ipcMain.on(
  'update-translations',
  (_event: any, newTranslations: MenuTranslations) => {
    translations = newTranslations;
    buildMenu();
  }
);

/**
 * –°—Ç—Ä–æ–∏—Ç –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ macOS –∏ Windows –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function buildMenu(): void {
  // –®–∞–±–ª–æ–Ω –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
  const template: any[] = [
    {
      label: translations.menu || 'Menu',
      submenu: [
        {
          role: 'about',
          label: translations.about || 'About',
        },
        { role: 'undo', label: translations.undo || 'Undo' },
        { role: 'redo', label: translations.redo || 'Redo' },
        { role: 'cut', label: translations.cut || 'Cut' },
        { role: 'copy', label: translations.copy || 'Copy' },
        { role: 'paste', label: translations.paste || 'Paste' },
        { role: 'selectall', label: translations.selectAll || 'Select All' },
        { role: 'toggleDevTools', visible: isDev },
      ],
    },
  ];

  const menu = Menu.buildFromTemplate(template);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  if (isMac) {
    // –î–ª—è macOS
    Menu.setApplicationMenu(menu);
  } else {
    // –î–ª—è Windows –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if (mainWindow) {
      mainWindow.setMenu(menu);
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã, –∏–∫–æ–Ω–∫–∏ –∏ webPreferences
 */
function createWindow(): void {
  buildMenu();

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –æ–∫–Ω–∞
  mainWindow = new BrowserWindow({
    width: 480,
    height: 350,
    minWidth: 480,
    minHeight: 350,
    icon: path.join(__dirname, '../icons', isWindows ? 'icon.ico' : ''),
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  if (isDev) {
    console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º URL –≤ dev —Ä–µ–∂–∏–º–µ: http://localhost:8000');
    mainWindow.loadURL('http://localhost:8000');
  } else {
    console.log(
      'üîß –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ production —Ä–µ–∂–∏–º–µ:',
      path.join(__dirname, '../react/index.html')
    );
    mainWindow.loadFile(path.join(__dirname, '../react/index.html'));
  }

  // –Ø–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
  mainWindow.on('closed', () => {
    // –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    ipcMain.removeHandler('transformers:run');
    ipcMain.removeHandler('models:check-availability');
    ipcMain.removeHandler('models:download');
    ipcMain.removeHandler('models:get-available');
    ipcMain.removeHandler('models:delete');

    // –£–¥–∞–ª—è–µ—Ç –Ω–æ–≤—ã–µ Ollama –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    ipcMain.removeHandler('ollama:generate');
    ipcMain.removeHandler('models:install');
    ipcMain.removeHandler('models:remove');
    ipcMain.removeHandler('models:list');

    isHandlerRegistered = false;

    if (worker) {
      worker.terminate();
      worker = null;
    }

    mainWindow = null;
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞
  let isWorkerBusy: boolean = false;

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è `transformers:run`
  if (!isHandlerRegistered) {
    ipcMain.handle(
      'transformers:run',
      (_event: any, args: TransformersArgs) => {
        return new Promise((resolve, reject) => {
          if (isWorkerBusy) {
            reject(new Error('Worker is busy'));
            return;
          }

          if (!worker) {
            worker = new Worker(path.join(__dirname, 'worker.js'));
          }

          isWorkerBusy = true;

          // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
          worker.removeAllListeners('message');

          worker.on('message', (message: WorkerStatus) => {
            mainWindow?.webContents.send('transformers:status', message);
            if (message.status === 'complete') {
              resolve(message.data);
              isWorkerBusy = false;
            } else if (message.status === 'error') {
              reject(new Error(message.error));
              isWorkerBusy = false;
            }
          });

          worker.on('error', (error: Error) => {
            reject(error);
            isWorkerBusy = false;
          });

          worker.postMessage(args);
        });
      }
    );

    isHandlerRegistered = true;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
  ipcMain.handle(
    'models:check-availability',
    async (): Promise<ModelAvailability> => {
      try {
        return await ModelDownloader.checkAllModelsAvailability();
      } catch (error) {
        throw new Error(`Failed to check models: ${(error as Error).message}`);
      }
    }
  );

  ipcMain.handle(
    'models:download',
    async (_event: any, modelName: string): Promise<ModelOperationResult> => {
      try {
        await ModelDownloader.downloadModel(modelName, (progress: any) => {
          mainWindow?.webContents.send('models:download-progress', progress);
        });
        return { success: true };
      } catch (error) {
        throw new Error(
          `Failed to download model ${modelName}: ${(error as Error).message}`
        );
      }
    }
  );

  ipcMain.handle('models:get-available', (): AvailableModels => {
    try {
      return ModelDownloader.getAvailableModels();
    } catch (error) {
      throw new Error(
        `Failed to get available models: ${(error as Error).message}`
      );
    }
  });

  ipcMain.handle(
    'models:delete',
    async (_event: any, modelName: string): Promise<ModelOperationResult> => {
      try {
        await ModelDownloader.deleteModel(modelName);
        return { success: true };
      } catch (error) {
        throw new Error(
          `Failed to delete model ${modelName}: ${(error as Error).message}`
        );
      }
    }
  );

  // –°–æ–∑–¥–∞–Ω–∏–µ IPC handlers –¥–ª—è Ollama API
  setupOllamaIpcHandlers();
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama API
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–æ–≤–∫–∏, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
 */
function setupOllamaIpcHandlers(): void {
  if (!ollamaApi) {
    console.error('OllamaApi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Ollama
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç streaming –æ—Ç–≤–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
   */
  ipcMain.handle(
    'ollama:generate',
    async (_event: any, request: OllamaGenerateRequest): Promise<string> => {
      try {
        if (!request.model || !request.prompt) {
          throw new Error('Model and prompt are required');
        }

        let fullResponse = '';

        await ollamaApi!.generate(request, chunk => {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º streaming –æ—Ç–≤–µ—Ç—ã –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
          mainWindow?.webContents.send('ollama:generate-progress', chunk);

          if (chunk.response) {
            fullResponse += chunk.response;
          }
        });

        return fullResponse;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ollama:', error);
        throw new Error(`Generation failed: ${(error as Error).message}`);
      }
    }
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
   */
  ipcMain.handle(
    'models:install',
    async (
      _event: any,
      request: OllamaPullRequest
    ): Promise<{ success: boolean }> => {
      try {
        if (!request.name) {
          throw new Error('Model name is required');
        }

        const result = await ollamaApi!.installModel(request, progress => {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
          mainWindow?.webContents.send('models:install-progress', progress);
        });

        return { success: result.success };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏:', error);
        throw new Error(`Installation failed: ${(error as Error).message}`);
      }
    }
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
   */
  ipcMain.handle(
    'models:remove',
    async (
      _event: any,
      request: OllamaDeleteRequest
    ): Promise<{ success: boolean }> => {
      try {
        if (!request.name) {
          throw new Error('Model name is required');
        }

        const result = await ollamaApi!.removeModel(request);
        return { success: result.success };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
        throw new Error(`Removal failed: ${(error as Error).message}`);
      }
    }
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Ollama
   */
  ipcMain.handle('models:list', async (): Promise<any> => {
    try {
      const models = await ollamaApi!.listModels();
      return models;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
      throw new Error(`Failed to list models: ${(error as Error).message}`);
    }
  });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Electron
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç Ollama –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
 */
app.on('ready', async () => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Ollama –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–∫–Ω–∞
    await initializeOllama();

    // –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    createWindow();

    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);

    // –°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ Ollama –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    createWindow();
  }
});

// –í—ã—Ö–æ–¥ –∫–æ–≥–¥–∞ –≤—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã, –∫—Ä–æ–º–µ macOS. –¢–∞–º –æ–±—ã—á–Ω–æ
// –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏—Ö –ø–∞–Ω–µ–ª—å –º–µ–Ω—é –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
// —è–≤–Ω–æ –Ω–µ –≤—ã–π–¥–µ—Ç —Å –ø–æ–º–æ—â—å—é Cmd + Q
app.on('window-all-closed', async () => {
  if (!isMac) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try {
      await ollamaManager.stopOllama();
      console.log('Ollama —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama:', error);
    }

    app.quit();
  }
});

app.on('activate', () => {
  // –ù–∞ OS X –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–∫–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–æ–≥–¥–∞
  // –∏–∫–æ–Ω–∫–∞ –≤ dock –∫–ª–∏–∫–∞–µ—Ç—Å—è –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.on('before-quit', async () => {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
  try {
    await ollamaManager.stopOllama();
    console.log('Ollama —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', error);
  }
});

// –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –∫–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
// –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–¥–∞
