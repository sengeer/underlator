const { app, BrowserWindow, ipcMain, Menu } = require('electron');
const path = require('path');
const { Worker } = require('worker_threads');
const ModelDownloader = require('./services/model-downloader');
import {
  OllamaManager,
  OllamaApi,
  ModelCatalogService,
  SplashManager,
} from './services';
import { IpcHandler } from './presentation/ipc/ipc-handlers';
import {
  createSplashIpcHandler,
  SplashIpcHandler,
} from './presentation/ipc/splash-handlers';
import type {
  MenuTranslations,
  TransformersArgs,
  WorkerStatus,
  ModelAvailability,
  ModelOperationResult,
  AvailableModels,
  OllamaGenerateRequest,
  OllamaPullRequest,
  OllamaDeleteRequest,
  ModelCatalog,
  OllamaModelInfo,
  CatalogFilters,
  SplashMessages,
} from './types';

if (require('electron-squirrel-startup')) {
  app.quit();
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç development —Ä–µ–∂–∏–º
 * –í Electron Forge —Å webpack NODE_ENV –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cross-env
 */
const isDev: boolean = process.env['NODE_ENV'] === 'development';
console.log('üîß NODE_ENV:', process.env['NODE_ENV']);

let worker: typeof Worker | null = null;
let mainWindow: typeof BrowserWindow | null = null;
let isHandlerRegistered: boolean = false;
let ollamaApi: OllamaApi | null = null;
let modelCatalogService: ModelCatalogService | null = null;
let splashManager: SplashManager | null = null;
const isMac: boolean = process.platform === 'darwin';
const isWindows: boolean = process.platform === 'win32';

let translations: MenuTranslations = {};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Ollama –∏ —Å–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Ollama –∫ —Ä–∞–±–æ—Ç–µ
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å splash screen –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initializeOllama(): Promise<void> {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama...');

    if (splashManager) {
      await splashManager.updateStatus({
        status: 'checking_ollama',
        message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...',
        details: '–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama —Å–µ—Ä–≤–µ—Ä–∞',
        progress: 10,
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OllamaManager
    await OllamaManager.initialize();

    if (splashManager) {
      await splashManager.updateStatus({
        status: 'starting_ollama',
        message: '–ó–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞...',
        details: '–ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Ollama —Å–µ—Ä–≤–µ—Ä',
        progress: 25,
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç Ollama —Å–µ—Ä–≤–µ—Ä
    const isStarted = await OllamaManager.startOllama();

    if (isStarted) {
      console.log('Ollama —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    } else {
      console.log('Ollama —Å–µ—Ä–≤–µ—Ä —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    }

    if (splashManager) {
      await splashManager.updateStatus({
        status: 'waiting_for_server',
        message: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...',
        details: '–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama —Å–µ—Ä–≤–µ—Ä–∞',
        progress: 40,
      });
    }

    // –°–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Ollama
    ollamaApi = new OllamaApi();

    if (splashManager) {
      await splashManager.updateStatus({
        status: 'health_check',
        message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...',
        details: '–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
        progress: 60,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const isHealthy = await ollamaApi.healthCheck();
    if (isHealthy) {
      console.log('Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.warn('Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    }

    if (splashManager) {
      await splashManager.updateStatus({
        status: 'creating_api',
        message: '–°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞...',
        details: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama API',
        progress: 75,
      });
    }

    // –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
    modelCatalogService = new ModelCatalogService();

    if (splashManager) {
      await splashManager.updateStatus({
        status: 'creating_catalog',
        message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π...',
        details: '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
        progress: 90,
      });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç IPC handlers –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è IPC handlers...');
    setupOllamaIpcHandlers();
    setupCatalogIpcHandlers();
    console.log('‚úÖ IPC handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

    if (splashManager) {
      await splashManager.updateStatus({
        status: 'ready',
        message: '–ì–æ—Ç–æ–≤–æ!',
        details: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ',
        progress: 100,
      });
    }

    console.log('Ollama —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Ollama:', error);

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å splash screen —Å –æ—à–∏–±–∫–æ–π
    if (splashManager) {
      await splashManager.handleError(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Ollama: ${(error as Error).message}`
      );
    }

    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Ollama: ${(error as Error).message}`
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–Ω—é
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç renderer –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—é
 */
ipcMain.on(
  'update-translations',
  (_event: any, newTranslations: MenuTranslations) => {
    translations = newTranslations;
    buildMenu();
  }
);

/**
 * –°—Ç—Ä–æ–∏—Ç –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ macOS –∏ Windows –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function buildMenu(): void {
  // –®–∞–±–ª–æ–Ω –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
  const template: any[] = [
    {
      label: translations.menu || 'Menu',
      submenu: [
        {
          role: 'about',
          label: translations.about || 'About',
        },
        { role: 'undo', label: translations.undo || 'Undo' },
        { role: 'redo', label: translations.redo || 'Redo' },
        { role: 'cut', label: translations.cut || 'Cut' },
        { role: 'copy', label: translations.copy || 'Copy' },
        { role: 'paste', label: translations.paste || 'Paste' },
        { role: 'selectall', label: translations.selectAll || 'Select All' },
        { role: 'toggleDevTools', visible: isDev },
      ],
    },
  ];

  const menu = Menu.buildFromTemplate(template);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  if (isMac) {
    // –î–ª—è macOS
    Menu.setApplicationMenu(menu);
  } else {
    // –î–ª—è Windows –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if (mainWindow) {
      mainWindow.setMenu(menu);
    }
  }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è splash screen
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è splash screen
 */
function setupSplashIpcHandlers(): void {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Splash IPC handlers...');
  if (!splashManager) {
    console.error('‚ùå SplashManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  console.log('‚úÖ SplashManager –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers...');

  const splashHandler = createSplashIpcHandler(splashManager);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ splash screen
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'splash:update-status',
    SplashIpcHandler.createSplashHandlerWrapper(
      async (request: SplashMessages) => {
        return await splashHandler.handleUpdateStatus(request);
      },
      'splash:update-status'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ splash screen
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'splash:set-progress',
    SplashIpcHandler.createSplashHandlerWrapper(
      async (request: { progress: number }) => {
        return await splashHandler.handleSetProgress(request);
      },
      'splash:set-progress'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ splash screen
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'splash:complete',
    SplashIpcHandler.createSplashHandlerWrapper(async (_request: unknown) => {
      return await splashHandler.handleComplete(_request);
    }, 'splash:complete')
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ splash screen
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'splash:error',
    SplashIpcHandler.createSplashHandlerWrapper(
      async (request: { error: string }) => {
        return await splashHandler.handleError(request);
      },
      'splash:error'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ splash screen
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'splash:get-status',
    SplashIpcHandler.createSplashHandlerWrapper(async (_request: unknown) => {
      return await splashHandler.handleGetStatus(_request);
    }, 'splash:get-status')
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è splash screen
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'splash:hide',
    SplashIpcHandler.createSplashHandlerWrapper(async (_request: unknown) => {
      return await splashHandler.handleHide(_request);
    }, 'splash:hide')
  );

  console.log('IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ splash screen –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã, –∏–∫–æ–Ω–∫–∏ –∏ webPreferences
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç splash screen –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function createWindow(): void {
  buildMenu();

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ preload —Å–∫—Ä–∏–ø—Ç—É
   */
  const preloadPath = path.join(__dirname, 'preload.js');

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –æ–∫–Ω–∞
  mainWindow = new BrowserWindow({
    width: 480,
    height: 350,
    minWidth: 480,
    minHeight: 350,
    icon: path.join(__dirname, '../icons', isWindows ? 'icon.ico' : ''),
    webPreferences: {
      preload: preloadPath,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // –í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é splash screen
  initializeSplashScreen();

  // –Ø–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
  mainWindow.on('closed', () => {
    // –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    ipcMain.removeHandler('transformers:run');
    ipcMain.removeHandler('models:check-availability');
    ipcMain.removeHandler('models:download');
    ipcMain.removeHandler('models:get-available');
    ipcMain.removeHandler('models:delete');

    // –£–¥–∞–ª—è–µ—Ç –Ω–æ–≤—ã–µ Ollama –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    ipcMain.removeHandler('ollama:generate');
    ipcMain.removeHandler('models:install');
    ipcMain.removeHandler('models:remove');
    ipcMain.removeHandler('models:list');

    // –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
    ipcMain.removeHandler('catalog:get');
    ipcMain.removeHandler('catalog:search');
    ipcMain.removeHandler('catalog:get-model-info');

    // –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ splash screen
    ipcMain.removeHandler('splash:update-status');
    ipcMain.removeHandler('splash:set-progress');
    ipcMain.removeHandler('splash:complete');
    ipcMain.removeHandler('splash:error');
    ipcMain.removeHandler('splash:get-status');
    ipcMain.removeHandler('splash:hide');

    isHandlerRegistered = false;

    if (worker) {
      worker.terminate();
      worker = null;
    }

    if (splashManager) {
      splashManager.cleanup();
      splashManager = null;
    }

    mainWindow = null;
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –≤–æ—Ä–∫–µ—Ä–∞
  let isWorkerBusy: boolean = false;

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è `transformers:run`
  if (!isHandlerRegistered) {
    ipcMain.handle(
      'transformers:run',
      (_event: any, args: TransformersArgs) => {
        return new Promise((resolve, reject) => {
          if (isWorkerBusy) {
            reject(new Error('Worker is busy'));
            return;
          }

          if (!worker) {
            worker = new Worker(path.join(__dirname, 'worker.js'));
          }

          isWorkerBusy = true;

          // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
          worker.removeAllListeners('message');

          worker.on('message', (message: WorkerStatus) => {
            mainWindow?.webContents.send('transformers:status', message);
            if (message.status === 'complete') {
              resolve(message.data);
              isWorkerBusy = false;
            } else if (message.status === 'error') {
              reject(new Error(message.error));
              isWorkerBusy = false;
            }
          });

          worker.on('error', (error: Error) => {
            reject(error);
            isWorkerBusy = false;
          });

          worker.postMessage(args);
        });
      }
    );

    isHandlerRegistered = true;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
  ipcMain.handle(
    'models:check-availability',
    async (): Promise<ModelAvailability> => {
      try {
        return await ModelDownloader.checkAllModelsAvailability();
      } catch (error) {
        throw new Error(`Failed to check models: ${(error as Error).message}`);
      }
    }
  );

  ipcMain.handle(
    'models:download',
    async (_event: any, modelName: string): Promise<ModelOperationResult> => {
      try {
        await ModelDownloader.downloadModel(modelName, (progress: any) => {
          mainWindow?.webContents.send('models:download-progress', progress);
        });
        return { success: true };
      } catch (error) {
        throw new Error(
          `Failed to download model ${modelName}: ${(error as Error).message}`
        );
      }
    }
  );

  ipcMain.handle('models:get-available', (): AvailableModels => {
    try {
      return ModelDownloader.getAvailableModels();
    } catch (error) {
      throw new Error(
        `Failed to get available models: ${(error as Error).message}`
      );
    }
  });

  ipcMain.handle(
    'models:delete',
    async (_event: any, modelName: string): Promise<ModelOperationResult> => {
      try {
        await ModelDownloader.deleteModel(modelName);
        return { success: true };
      } catch (error) {
        throw new Error(
          `Failed to delete model ${modelName}: ${(error as Error).message}`
        );
      }
    }
  );

  // IPC handlers –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  // –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö initializeOllama() –∏ initializeSplashScreen()
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç splash screen
 * –°–æ–∑–¥–∞–µ—Ç SplashManager –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
 */
async function initializeSplashScreen(): Promise<void> {
  try {
    if (!mainWindow) {
      throw new Error('Main window not available');
    }

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è splash screen...');

    // –°–æ–∑–¥–∞–µ—Ç SplashManager
    splashManager = new SplashManager({
      minDisplayTime: 2000,
      autoHide: true,
      showDetails: true,
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç splash screen
    await splashManager.initialize(mainWindow);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º IPC handlers –¥–ª—è splash screen –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è SplashManager
    setupSplashIpcHandlers();

    console.log('Splash screen –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ splash screen:', error);
  }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama API
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–æ–≤–∫–∏, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function setupOllamaIpcHandlers(): void {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama IPC handlers...');
  if (!ollamaApi) {
    console.error('‚ùå OllamaApi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  console.log('‚úÖ OllamaApi –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers...');

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Ollama
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç streaming –æ—Ç–≤–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'ollama:generate',
    IpcHandler.createHandlerWrapper(
      async (request: OllamaGenerateRequest): Promise<string> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(request, [
          'model',
          'prompt',
        ]);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        let fullResponse = '';

        await ollamaApi!.generate(request, chunk => {
          // –û—Ç–ø—Ä–∞–≤–∫–∞ streaming –æ—Ç–≤–µ—Ç–æ–≤ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
          mainWindow?.webContents.send('ollama:generate-progress', chunk);

          if (chunk.response) {
            fullResponse += chunk.response;
          }
        });

        return fullResponse;
      },
      'ollama:generate'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç streaming wrapper –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  ipcMain.handle(
    'models:install',
    IpcHandler.createStreamingHandlerWrapper(
      async (
        request: OllamaPullRequest,
        onProgress: (progress: any) => void
      ): Promise<{ success: boolean }> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(request, ['name']);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await ollamaApi!.installModel(request, progress => {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ renderer –ø—Ä–æ—Ü–µ—Å—Å
          mainWindow?.webContents.send('models:install-progress', progress);
          // –í—ã–∑—ã–≤–∞–µ—Ç callback –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          onProgress(progress);
        });

        return { success: result.success };
      },
      'models:install'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'models:remove',
    IpcHandler.createHandlerWrapper(
      async (request: OllamaDeleteRequest): Promise<{ success: boolean }> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(request, ['name']);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await ollamaApi!.removeModel(request);
        return { success: result.success };
      },
      'models:remove'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Ollama
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'models:list',
    IpcHandler.createHandlerWrapper(async (): Promise<any> => {
      const models = await ollamaApi!.listModels();
      return models;
    }, 'models:list')
  );
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –º–æ–¥–µ–ª–µ–π
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞, –ø–æ–∏—Å–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function setupCatalogIpcHandlers(): void {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Catalog IPC handlers...');
  if (!modelCatalogService) {
    console.error('‚ùå ModelCatalogService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  console.log('‚úÖ ModelCatalogService –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers...');

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'catalog:get',
    IpcHandler.createHandlerWrapper(
      async (
        params: { forceRefresh?: boolean } = {}
      ): Promise<ModelCatalog> => {
        const result = await modelCatalogService!.getAvailableModels(
          params.forceRefresh || false
        );

        if (!result.success || !result.data) {
          throw new Error(result.error || 'Failed to get catalog');
        }

        return result.data;
      },
      'catalog:get'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'catalog:search',
    IpcHandler.createHandlerWrapper(
      async (filters: CatalogFilters): Promise<ModelCatalog> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const validation = IpcHandler.validateRequest(filters, []);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await modelCatalogService!.searchModels(filters);

        if (!result.success || !result.data) {
          throw new Error(result.error || 'Failed to search models');
        }

        return result.data;
      },
      'catalog:search'
    )
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç wrapper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  ipcMain.handle(
    'catalog:get-model-info',
    IpcHandler.createHandlerWrapper(
      async (params: {
        modelName: string;
      }): Promise<OllamaModelInfo | null> => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const validation = IpcHandler.validateRequest(params, ['modelName']);
        if (!validation.valid) {
          throw new Error(validation.error);
        }

        const result = await modelCatalogService!.getModelInfo(
          params.modelName
        );

        if (!result.success) {
          throw new Error(result.error || 'Failed to get model info');
        }

        return result.data || null;
      },
      'catalog:get-model-info'
    )
  );
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Electron
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç splash screen, –∑–∞—Ç–µ–º Ollama –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
 */
app.on('ready', async () => {
  try {
    // –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å splash screen
    createWindow();

    // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ splash screen
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Ollama —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º splash screen
    await initializeOllama();

    // –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç splash screen
    if (splashManager) {
      await splashManager.complete();
    }

    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ splash screen
    if (splashManager) {
      await splashManager.handleError(
        `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${(error as Error).message}`
      );
    }

    // –°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    if (!mainWindow) {
      createWindow();
    }
  }
});

// –í—ã—Ö–æ–¥ –∫–æ–≥–¥–∞ –≤—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã, –∫—Ä–æ–º–µ macOS. –¢–∞–º –æ–±—ã—á–Ω–æ
// –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏—Ö –ø–∞–Ω–µ–ª—å –º–µ–Ω—é –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
// —è–≤–Ω–æ –Ω–µ –≤—ã–π–¥–µ—Ç —Å –ø–æ–º–æ—â—å—é Cmd + Q
app.on('window-all-closed', async () => {
  if (!isMac) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try {
      await OllamaManager.stopOllama();
      console.log('Ollama —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama:', error);
    }

    app.quit();
  }
});

app.on('activate', () => {
  // –ù–∞ OS X –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–∫–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–æ–≥–¥–∞
  // –∏–∫–æ–Ω–∫–∞ –≤ dock –∫–ª–∏–∫–∞–µ—Ç—Å—è –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.on('before-quit', async () => {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
  try {
    await OllamaManager.stopOllama();
    console.log('Ollama —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', error);
  }
});

// –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –∫–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
// –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—é–¥–∞
