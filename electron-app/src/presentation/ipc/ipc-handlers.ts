/**
 * @module IpcHandlers
 * @description –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ IPC —Å–æ–æ–±—â–µ–Ω–∏–π
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IPC –æ–ø–µ—Ä–∞—Ü–∏–π
 */

import type { OllamaOperationResult } from '../../types';

/**
 * @description –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è IPC —Å–æ–æ–±—â–µ–Ω–∏–π
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö IPC –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export interface IpcMessage<T = any> {
  /** –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ */
  type: string;
  /** –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */
  data?: T;
  /** –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ */
  error?: string;
  /** –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ */
  status: 'success' | 'error' | 'progress';
  /** ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
  id?: string;
}

/**
 * @description –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è IPC –∑–∞–ø—Ä–æ—Å–æ–≤
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç renderer –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
export interface IpcRequest<T = any> {
  /** –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ */
  type: string;
  /** –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ */
  params?: T;
  /** ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
  id?: string;
}

/**
 * @description –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è IPC –æ—Ç–≤–µ—Ç–æ–≤
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç main –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
export interface IpcResponse<T = any> {
  /** –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ */
  success: boolean;
  /** –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ */
  data?: T;
  /** –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ */
  error?: string;
  /** ID –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
  id?: string;
}

/**
 * @description –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ IPC —Å–æ–æ–±—â–µ–Ω–∏–π
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IPC –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export class IpcHandler {
  /**
   * @description –°–æ–∑–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π IPC –æ—Ç–≤–µ—Ç
   * @param data - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
   * @param id - ID —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  static createSuccessResponse<T>(data: T, id?: string): IpcResponse<T> {
    return {
      success: true,
      data,
      id,
    };
  }

  /**
   * @description –°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
   * @param error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param id - ID —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
   */
  static createErrorResponse(error: string, id?: string): IpcResponse {
    return {
      success: false,
      error,
      id,
    };
  }

  /**
   * @description –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param progress - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   * @param id - ID —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  static createProgressMessage<T>(progress: T, id?: string): IpcMessage<T> {
    return {
      type: 'progress',
      data: progress,
      status: 'progress',
      id,
    };
  }

  /**
   * @description –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π IPC –∑–∞–ø—Ä–æ—Å
   * @param request - –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param requiredFields - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  static validateRequest(
    request: any,
    requiredFields: string[] = []
  ): { valid: boolean; error?: string } {
    if (!request || typeof request !== 'object') {
      return { valid: false, error: '‚ùå Invalid request format' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    for (const field of requiredFields) {
      if (!(field in request)) {
        return { valid: false, error: `‚ùå Missing required field: ${field}` };
      }
    }

    return { valid: true };
  }

  /**
   * @description –õ–æ–≥–∏—Ä—É–µ—Ç IPC –æ–ø–µ—Ä–∞—Ü–∏—é
   * @param operation - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   * @param request - –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
   * @param response - –ò—Å—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
   * @param duration - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  static logOperation(
    operation: string,
    request?: any,
    response?: any,
    duration?: number
  ): void {
    const logData = {
      operation,
      timestamp: new Date().toISOString(),
      request: request ? JSON.stringify(request) : undefined,
      response: response ? JSON.stringify(response) : undefined,
      duration: duration ? `${duration}ms` : undefined,
    };

    console.log(`üîå [IPC] ${operation}:`, logData);
  }

  /**
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ IPC –æ–ø–µ—Ä–∞—Ü–∏–π
   * @param error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
   * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è IPC
   */
  static handleError(error: any, context?: string): string {
    const errorMessage = error instanceof Error ? error.message : String(error);
    const fullMessage = context ? `${context}: ${errorMessage}` : errorMessage;

    console.error(`‚ùå [IPC Error] ${fullMessage}`, error);

    return fullMessage;
  }

  /**
   * @description –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Ollama –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ IPC –æ—Ç–≤–µ—Ç
   * @param result - –†–µ–∑—É–ª—å—Ç–∞—Ç Ollama –æ–ø–µ—Ä–∞—Ü–∏–∏
   * @param id - ID —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns IPC –æ—Ç–≤–µ—Ç
   */
  static convertOllamaResult<T>(
    result: OllamaOperationResult<T>,
    id?: string
  ): IpcResponse<T | undefined> {
    if (result.success) {
      return this.createSuccessResponse(result.data, id);
    } else {
      return this.createErrorResponse(result.error || '‚ùå Unknown error', id);
    }
  }

  /**
   * @description –°–æ–∑–¥–∞–µ—Ç –æ–±–µ—Ä—Ç–∫—É –¥–ª—è IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * @param handler - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   * @param operationName - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns –û–±–µ—Ä–Ω—É—Ç—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  static createHandlerWrapper<T, R>(
    handler: (request: T) => Promise<R>,
    operationName: string
  ) {
    return async (_event: any, request: T): Promise<IpcResponse<R>> => {
      const startTime = Date.now();
      const requestId = Math.random().toString(36).substr(2, 9);

      console.log(`üîß IPC Handler is called: ${operationName}`, {
        requestId,
        request,
      });

      try {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        this.logOperation(operationName, request, undefined, undefined);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        const result = await handler(request);
        const duration = Date.now() - startTime;

        // –°–æ–∑–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        const response = this.createSuccessResponse(result, requestId);

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        this.logOperation(operationName, request, response, duration);

        console.log(`‚úÖ IPC Handler completed successfully: ${operationName}`, {
          requestId,
          duration,
        });
        return response;
      } catch (error) {
        const duration = Date.now() - startTime;
        const errorMessage = this.handleError(error, operationName);
        const response = this.createErrorResponse(errorMessage, requestId);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        this.logOperation(operationName, request, response, duration);

        console.error(`‚ùå IPC Handler error: ${operationName}`, {
          requestId,
          error,
          duration,
        });
        return response;
      }
    };
  }

  /**
   * @description –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è streaming –æ–ø–µ—Ä–∞—Ü–∏–π
   * @param handler - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å callback
   * @param operationName - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   * @returns –û–±–µ—Ä–Ω—É—Ç—ã–π streaming –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  static createStreamingHandlerWrapper<T>(
    handler: (request: T, onProgress: (progress: any) => void) => Promise<any>,
    operationName: string
  ) {
    return async (event: any, request: T): Promise<IpcResponse> => {
      const startTime = Date.now();
      const requestId = Math.random().toString(36).substr(2, 9);

      try {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        this.logOperation(operationName, request, undefined, undefined);

        // –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const onProgress = (progress: any) => {
          const progressMessage = this.createProgressMessage(
            progress,
            requestId
          );
          event.sender.send(`${operationName}:progress`, progressMessage);
        };

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        const result = await handler(request, onProgress);
        const duration = Date.now() - startTime;

        // –°–æ–∑–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        const response = this.createSuccessResponse(result, requestId);

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        this.logOperation(operationName, request, response, duration);

        return response;
      } catch (error) {
        const duration = Date.now() - startTime;
        const errorMessage = this.handleError(error, operationName);
        const response = this.createErrorResponse(errorMessage, requestId);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        this.logOperation(operationName, request, response, duration);

        return response;
      }
    };
  }
}
