{
  /**
   * Конфигурация компилятора TypeScript для Electron backend
   *
   * Описание: Настраивает TypeScript компилятор для Electron main процесса
   * с поддержкой Node.js окружения и строгой типизации.
   *
   * Документация: https://www.typescriptlang.org/tsconfig
   */
  "compilerOptions": {
    /**
     * Версия ECMAScript для компиляции
     *
     * Описание: Указывает версию ECMAScript, в которую будет компилироваться
     * TypeScript код. ES2020 поддерживает современные возможности JavaScript.
     *
     * Обоснование: ES2020 обеспечивает баланс между современными возможностями
     * и совместимостью с Node.js 18+ (минимальная версия для Electron).
     *
     * Документация: https://www.typescriptlang.org/tsconfig#target
     */
    "target": "ES2020",

    /**
     * Система модулей для компиляции
     *
     * Описание: Указывает систему модулей для скомпилированного кода.
     * CommonJS совместим с Node.js и Electron окружением.
     *
     * Обоснование: Electron main процесс работает в Node.js окружении,
     * которое использует CommonJS модули по умолчанию.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#module
     */
    "module": "CommonJS",

    /**
     * Библиотеки типов для компиляции
     *
     * Описание: Указывает какие библиотеки типов включать в компиляцию.
     * ES2020 обеспечивает типы для современных JavaScript возможностей.
     *
     * Обоснование: ES2020 библиотека включает типы для всех возможностей,
     * доступных в target ES2020, обеспечивая полную типизацию.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#lib
     */
    "lib": ["ES2020"],

    /**
     * Директория для скомпилированных файлов
     *
     * Описание: Указывает директорию, в которую будут помещены
     * скомпилированные JavaScript файлы.
     *
     * Обоснование: Отдельная директория для скомпилированных файлов
     * упрощает сборку и предотвращает конфликты с исходным кодом.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#outDir
     */
    "outDir": "./dist/electron",

    /**
     * Корневая директория исходного кода
     *
     * Описание: Указывает корневую директорию исходного кода TypeScript.
     * Все файлы должны находиться внутри этой директории.
     *
     * Обоснование: rootDir определяет структуру выходных файлов
     * и предотвращает выход файлов за пределы outDir.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#rootDir
     */
    "rootDir": "./src",

    /**
     * Включает все строгие проверки типов
     *
     * Описание: Включает все строгие проверки типов TypeScript,
     * обеспечивая максимальную безопасность типов.
     *
     * Обоснование: Строгие проверки типов предотвращают ошибки
     * во время выполнения и улучшают качество кода.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#strict
     */
    "strict": true,

    /**
     * Совместимость с ES модулями
     *
     * Описание: Обеспечивает совместимость между CommonJS и ES модулями,
     * позволяя импортировать CommonJS модули как ES модули.
     *
     * Обоснование: Необходимо для корректного импорта модулей Node.js
     * и сторонних библиотек в TypeScript проекте.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#esModuleInterop
     */
    "esModuleInterop": true,

    /**
     * Разрешает синтетические default импорты
     *
     * Описание: Позволяет импортировать модули без default экспорта
     * как если бы они имели default экспорт.
     *
     * Обоснование: Упрощает импорт модулей Node.js и сторонних библиотек,
     * которые не имеют default экспорта.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports
     */
    "allowSyntheticDefaultImports": true,

    /**
     * Пропускает проверку типов в .d.ts файлах
     *
     * Описание: Отключает проверку типов в файлах деклараций типов,
     * что ускоряет компиляцию.
     *
     * Обоснование: Ускоряет компиляцию, особенно в больших проектах
     * с множеством зависимостей. Ошибки в .d.ts файлах редки.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#skipLibCheck
     */
    "skipLibCheck": true,

    /**
     * Принудительное соблюдение регистра
     *
     * Описание: Обеспечивает соблюдение регистра в именах файлов
     * для кроссплатформенной совместимости.
     *
     * Обоснование: Предотвращает проблемы с регистром файлов на Windows
     * и других файловых системах, чувствительных к регистру.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames
     */
    "forceConsistentCasingInFileNames": true,

    /**
     * Разрешает импорт JSON файлов
     *
     * Описание: Позволяет импортировать JSON файлы как модули
     * с автоматической типизацией.
     *
     * Обоснование: Упрощает работу с конфигурационными файлами
     * и данными в JSON формате.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#resolveJsonModule
     */
    "resolveJsonModule": true,

    /**
     * Генерирует файлы деклараций типов
     *
     * Описание: Создает .d.ts файлы с декларациями типов
     * для скомпилированных модулей.
     *
     * Обоснование: Файлы деклараций необходимы для типизации
     * при использовании модулей в других проектах.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#declaration
     */
    "declaration": true,

    /**
     * Генерирует source maps для деклараций
     *
     * Описание: Создает .d.ts.map файлы для связи деклараций
     * с исходным TypeScript кодом.
     *
     * Обоснование: Упрощает отладку и навигацию по коду
     * при работе с декларациями типов.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#declarationMap
     */
    "declarationMap": true,

    /**
     * Генерирует source maps
     *
     * Описание: Создает .js.map файлы для связи скомпилированного
     * JavaScript с исходным TypeScript кодом.
     *
     * Обоснование: Source maps необходимы для отладки TypeScript кода
     * в браузере и Node.js окружении.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#sourceMap
     */
    "sourceMap": true,

    /**
     * Удаляет комментарии из скомпилированного кода
     *
     * Описание: Удаляет комментарии из JavaScript файлов
     * для уменьшения размера.
     *
     * Обоснование: Комментарии увеличивают размер файлов
     * и не нужны в production коде.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#removeComments
     */
    "removeComments": false,

    /**
     * Запрещает неявные any типы
     *
     * Описание: Вызывает ошибку при использовании переменных
     * без явного указания типа, когда TypeScript не может вывести тип.
     *
     * Обоснование: Предотвращает использование any типов,
     * которые снижают безопасность типов.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noImplicitAny
     */
    "noImplicitAny": true,

    /**
     * Запрещает неявные возвраты
     *
     * Описание: Вызывает ошибку, если не все пути выполнения
     * функции возвращают значение.
     *
     * Обоснование: Предотвращает ошибки с неопределенными возвращаемыми
     * значениями в функциях.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noImplicitReturns
     */
    "noImplicitReturns": true,

    /**
     * Запрещает неявные this типы
     *
     * Описание: Вызывает ошибку при использовании this
     * с неявным типом any.
     *
     * Обоснование: Предотвращает ошибки с контекстом this
     * в методах классов.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noImplicitThis
     */
    "noImplicitThis": true,

    /**
     * Запрещает неиспользуемые локальные переменные
     *
     * Описание: Вызывает ошибку при объявлении локальных переменных,
     * которые не используются в коде.
     *
     * Обоснование: Предотвращает накопление неиспользуемого кода
     * и улучшает читаемость.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noUnusedLocals
     */
    "noUnusedLocals": true,

    /**
     * Запрещает неиспользуемые параметры
     *
     * Описание: Вызывает ошибку при объявлении параметров функций,
     * которые не используются в коде.
     *
     * Обоснование: Предотвращает накопление неиспользуемых параметров
     * и улучшает читаемость кода.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noUnusedParameters
     */
    "noUnusedParameters": true,

    /**
     * Запрещает fallthrough в switch
     *
     * Описание: Вызывает ошибку при отсутствии break или return
     * в case блоках switch.
     *
     * Обоснование: Предотвращает случайные fallthrough ошибки
     * в switch конструкциях.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch
     */
    "noFallthroughCasesInSwitch": true,

    /**
     * Запрещает доступ к свойствам через индекс
     *
     * Описание: Вызывает ошибку при доступе к свойствам объекта
     * через индексную сигнатуру без проверки существования.
     *
     * Обоснование: Предотвращает ошибки доступа к несуществующим
     * свойствам объектов.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noPropertyAccessFromIndexSignature
     */
    "noPropertyAccessFromIndexSignature": true,

    /**
     * Добавляет undefined к индексированному доступу
     *
     * Описание: Добавляет undefined к типу при индексированном доступе
     * к массивам и объектам.
     *
     * Обоснование: Предотвращает ошибки доступа к несуществующим
     * элементам массивов и объектов.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess
     */
    "noUncheckedIndexedAccess": true,

    /**
     * Использует unknown для catch переменных
     *
     * Описание: Использует тип unknown вместо any для переменных
     * в catch блоках.
     *
     * Обоснование: Повышает безопасность типов при обработке ошибок,
     * требуя явной проверки типов.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables
     */
    "useUnknownInCatchVariables": true,

    /**
     * Стратегия разрешения модулей
     *
     * Описание: Указывает стратегию разрешения модулей.
     * node стратегия совместима с Node.js и npm.
     *
     * Обоснование: node стратегия обеспечивает совместимость
     * с Node.js модульной системой и npm пакетами.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#moduleResolution
     */
    "moduleResolution": "node",

    /**
     * Включает экспериментальные декораторы
     *
     * Описание: Включает поддержку декораторов TypeScript,
     * необходимых для NestJS и других фреймворков.
     *
     * Обоснование: Декораторы необходимы для NestJS фреймворка,
     * который используется в Electron backend.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#experimentalDecorators
     */
    "experimentalDecorators": true,

    /**
     * Генерирует метаданные для декораторов
     *
     * Описание: Генерирует метаданные для декораторов,
     * необходимые для runtime рефлексии.
     *
     * Обоснование: Метаданные необходимы для работы NestJS
     * и других фреймворков, использующих декораторы.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata
     */
    "emitDecoratorMetadata": true,

    /**
     * Глобальные типы для проекта
     *
     * Описание: Указывает какие пакеты типов включать глобально.
     * node и electron обеспечивают типы для соответствующих API.
     *
     * Обоснование: Глобальные типы необходимы для работы с Node.js
     * и Electron API без явного импорта типов.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#types
     */
    "types": ["node", "electron"],

    /**
     * Разрешает компиляцию JavaScript файлов
     *
     * Описание: Позволяет TypeScript компилятору обрабатывать
     * JavaScript файлы в проекте.
     *
     * Обоснование: Необходимо для постепенной миграции
     * с JavaScript на TypeScript.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#allowJs
     */
    "allowJs": true,

    /**
     * Проверяет типы в JavaScript файлах
     *
     * Описание: Включает проверку типов в JavaScript файлах,
     * когда allowJs включен.
     *
     * Обоснование: Отключено для избежания ошибок в существующих
     * JavaScript файлах во время миграции.
     *
     * Документация: https://www.typescriptlang.org/tsconfig#checkJs
     */
    "checkJs": false
  },

  /**
   * Файлы для включения в компиляцию
   *
   * Описание: Указывает какие файлы и директории включать
   * в процесс компиляции TypeScript.
   *
   * Обоснование: src/ включает все TypeScript файлы
   * в директории src для компиляции.
   *
   * Документация: https://www.typescriptlang.org/tsconfig#include
   */
  "include": ["src/**/*"],

  /**
   * Файлы для исключения из компиляции
   *
   * Описание: Указывает какие файлы и директории исключать
   * из процесса компиляции TypeScript.
   *
   * Обоснование: Исключение node_modules, dist и тестовых файлов
   * ускоряет компиляцию и предотвращает ошибки.
   *
   * Документация: https://www.typescriptlang.org/tsconfig#exclude
   */
  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"],

  /**
   * Конфигурация для ts-node
   *
   * Описание: Настраивает ts-node для выполнения TypeScript файлов
   * напрямую без компиляции.
   *
   * Обоснование: Необходимо для корректной работы ts-node
   * с CommonJS модулями в Electron окружении.
   *
   * Документация: https://typestrong.org/ts-node/docs/configuration/
   */
  "ts-node": {
    /**
     * Отключает ES модули для ts-node
     *
     * Описание: Отключает поддержку ES модулей в ts-node,
     * используя CommonJS модули.
     *
     * Обоснование: Electron использует CommonJS модули,
     * поэтому ES модули должны быть отключены.
     */
    "esm": false,

    /**
     * Стратегия разрешения спецификаторов
     *
     * Описание: Использует node стратегию разрешения модулей
     * для совместимости с Node.js.
     *
     * Обоснование: node стратегия обеспечивает совместимость
     * с Node.js модульной системой.
     */
    "experimentalSpecifierResolution": "node"
  }
}
