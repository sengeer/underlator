---
alwaysApply: false
---
Глобальные задачи:
  Интегрировать typescript в electron-app
  Перейти на Ollama с помощью библиотеки ollama-electron с возможность управлять зоопарком моделей Ollama для локального использования.
  Отказаться от использования двух моделей opus-mt-ru-en и opus-mt-en-ru и библиотеки @huggingface/transformers.

Задачи большие, они декомпозированы на несколько этапов и подэтапов:
Этап 1: Интеграция TypeScript в Electron проект
  1.1 Установка TypeScript зависимостей и настройка tsconfig.json для Electron backend
  1.2 Настройка webpack для транспиляции TypeScript в JavaScript
  1.3 Миграция существующих JavaScript файлов на TypeScript
Этап 2: Создание инфраструктуры для работы с Ollama
  2.1 Установка electron-ollama и создание OllamaManager для управления Ollama в Electron Main Process
  2.2 Создание HTTP клиента для работы с Ollama API
  2.3 Создание типов и интерфейсов для Ollama API
Этап 3: Создание IPC системы для взаимодействия с Ollama
  3.1 Модификация main.ts для запуска Ollama и создания IPC handlers
  3.2 Создание утилит для обработки IPC сообщений
  3.3 Создание констант и конфигурации для Ollama
Этап 4: Создание нового провайдера embedded-ollama на frontend
  4.1 Создание структуры папок shared/lib/providers/embedded-ollama/
  4.2 Реализация embeddedOllamaProvider с единым методом generate
  4.3 Обновление системы провайдеров
Этап 5: Создание системы получения каталога моделей Ollama
  5.1 Создание сервиса для получения каталога моделей
  5.2 Создание типов для каталога моделей
  5.3 Создание IPC handlers для каталога моделей
  5.4 Улучшение HTML парсера для получения каталога всех квантизаций
Этап 6: Рефакторинг SelectorPopup и создание универсальных UI компонентов
  6.1 Создание компонента Search для поиска в списках
  6.2 Создание компонента SelectorOption с множественными состояниями
  6.3 Интеграция ленивой загрузки в компонент Popup
  6.4 Создание нового компонента PopupWithSearch для поддержки поиска в модальном окне
Этап 7: Интеграция взаимодействия с Electron API в React приложение
  7.1 Создание удобных функций для обращения к Electron API
  7.2 Реализация Redux slice для управления моделями в Settings
  7.3 Создание компонента который связывает запросы Electron API с подготовленными React компонентами
Этап 8: Создание системы Splash Screen для молниеносного отображения прогресса инициализации Ollama
  8.1 Создание Splash Screen UI внутри основного окна приложения
  8.2 Реализация системы передачи состояния инициализации Ollama в Splash Screen
Этап 9: Удаление старых провайдеров и зависимостей
  9.1 Удаление старых провайдеров
  9.2 Удаление @huggingface/transformers
  9.3 Очистка зависимостей
Этап 10: Тестирование и финальная оптимизация
  10.1 Комплексное тестирование системы
  10.2 Финальная оптимизация и настройка

Каждый из подэтапов будет далее содержать текущие задачи.