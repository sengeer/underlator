---
alwaysApply: false
---
Глобальные задачи:
  Интегрировать typescript в electron-app
  Перейти на Ollama с помощью библиотеки ollama-electron с возможность управлять зоопарком моделей Ollama для локального использования.
  Отказаться от использования двух моделей opus-mt-ru-en и opus-mt-en-ru и библиотеки @huggingface/transformers.

Задачи большие, они декомпозированы на несколько этапов и подэтапов:
Этап 1: Интеграция TypeScript в Electron проект
  1.1 Установка TypeScript зависимостей и настройка tsconfig.json для Electron backend
  1.2 Настройка webpack для транспиляции TypeScript в JavaScript
  1.3 Миграция существующих JavaScript файлов на TypeScript
Этап 2: Создание инфраструктуры для работы с Ollama
  2.1 Установка electron-ollama и создание OllamaManager для управления Ollama в Electron Main Process
  2.2 Создание HTTP клиента для работы с Ollama API
  2.3 Создание типов и интерфейсов для Ollama API
Этап 3: Создание IPC системы для взаимодействия с Ollama
  3.1 Модификация main.ts для запуска Ollama и создания IPC handlers
  3.2 Создание утилит для обработки IPC сообщений
  3.3 Создание констант и конфигурации для Ollama
Этап 4: Создание нового провайдера embedded-ollama на frontend
  4.1 Создание структуры папок shared/lib/providers/embedded-ollama/
  4.2 Реализация embeddedOllamaProvider с единым методом generate
  4.3 Обновление системы провайдеров
Этап 5: Создание системы получения каталога моделей Ollama
  5.1 Создание сервиса для получения каталога моделей
  5.2 Создание типов для каталога моделей
  5.3 Создание IPC handlers для каталога моделей
Этап 6: Рефакторинг SelectorPopup для поддержки сложных пунктов
  6.1 Создание базовой архитектуры SelectorPopup с поддержкой разных типов пунктов
  6.2 Создание компонента SimpleItem для простых пунктов
  6.3 Создание компонента ComplexItem для сложных пунктов с кнопками и прогрессом
  6.4 Создание компонентов для кнопок действий с моделью
Этап 7: Создание React компонентов для управления моделями
  7.1 Создание виджета models-manager с базовой структурой
  7.2 Реализация Redux slice для управления моделями
  7.3 Создание подкомпонентов для управления моделями
Этап 8: Интеграция с существующими компонентами
  8.1 Модификация useModel хука для работы с новым провайдером
  8.2 Обновление Settings компонента
  8.3 Обновление других виджетов
Этап 9: Удаление старых провайдеров и зависимостей
  9.1 Удаление старых провайдеров
  9.2 Удаление @huggingface/transformers
  9.3 Очистка зависимостей
Этап 10: Тестирование и финальная оптимизация
  10.1 Комплексное тестирование системы
  10.2 Финальная оптимизация и настройка

Каждый из подэтапов будет далее содержать текущие задачи.