---
alwaysApply: false
---
Условие:
Создавай TypeDoc документацию на русском языке, следуя лучшим практикам TypeDoc и стилистическим особенностям проекта.

## Основные требования:

### 1. Модули
```typescript
/**
 * @module ModuleName
 * Краткое описание назначения модуля.
 * Подробное описание функциональности и роли в системе.
 */
```

### 2. Классы
```typescript
/**
 * @class ClassName
 * Описание назначения класса и его роли в архитектуре.
 *
 * @param config - Конфигурация класса
 * @returns Экземпляр класса
 */
```

### 3. Методы и функции
```typescript
/**
 * Краткое описание функциональности.
 *
 * @param paramName - Описание параметра
 * @param options - Опции конфигурации
 * @returns Описание возвращаемого значения
 */
```

### 4. Интерфейсы и типы
```typescript
/**
 * @interface InterfaceName
 * Описание назначения интерфейса и его роли в системе.
 */
export interface InterfaceName {
  /** Описание свойства */
  property: string;
  /** Описание опционального свойства */
  optionalProperty?: number;
}
```

## Стилистические особенности:

- **Язык**: Всегда русский язык
- **Пунктуация**: Точки в конце предложений обязательны
- **Структура**: Сначала краткое описание, затем детали
- **Типы**: Указывай полные типы (React.ReactNode, React.CSSProperties, () => void)
- **Единицы**: Указывай единицы измерения (пиксели, миллисекундах, байтах)
- **Диапазоны**: Указывай диапазоны значений (0.0 - 1.0, 1-100)
- **Union типы**: Перечисляй все варианты ('fadeIn' | 'slideUp' | 'scaleIn')

## Дополнительные теги TypeDoc:

- `@typeParam T - описание generic параметра`
- `@throws Error - описание возможных ошибок`
- `@since версия - версия добавления`
- `@deprecated - для устаревшего кода`
- `@example - примеры использования`

Все комментарии должны быть исчерпывающими и помогать разработчикам понимать код без изучения реализации.
